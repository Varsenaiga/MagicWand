-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_maxPool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    m_0_ce0 : OUT STD_LOGIC;
    m_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1006_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1006_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1006_p_ce : OUT STD_LOGIC;
    grp_fu_385_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_385_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_385_p_ce : OUT STD_LOGIC );
end;


architecture behav of master_maxPool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv12_56 : STD_LOGIC_VECTOR (11 downto 0) := "000001010110";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln83_fu_191_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln83_reg_628 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln83_2_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln83_2_reg_633 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln83_fu_205_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln83_reg_641 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln85_1_fu_211_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln85_1_reg_646 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln85_fu_223_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln85_reg_654 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_0_addr_reg_662 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln85_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Result_6_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal dc_2_reg_688 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_2_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_2_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_j_phi_fu_156_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln93_fu_329_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal dc_reg_714 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal and_ln18_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_9_fu_579_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_9_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln18_2_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_2_reg_729 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_10_fu_614_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln83_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_128 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_urem_reg_139 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_151 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2221_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayidx121_sum_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_86 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln88_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln88_fu_229_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_239_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_249_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal arrayidx121_sum_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_267_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln93_fu_275_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln483_4_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln483_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln93_1_fu_317_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln93_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_341_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_351_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_6_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_355_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_364_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_10_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_7_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_8_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_5_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_445_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_8_fu_455_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln368_fu_468_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_2_fu_479_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_9_fu_472_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_10_fu_482_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ymaggreater_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_2_fu_508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_9_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1007_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_6_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_7_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_6_fu_515_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln25_7_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_8_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_7_fu_534_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln18_8_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_9_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_8_fu_554_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln18_3_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_6_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_4_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_10_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    conv2221_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                conv2221_reg_164 <= out_0_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                conv2221_reg_164 <= grp_fu_1006_p_dout0;
            end if; 
        end if;
    end process;

    d_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_fu_86 <= ap_const_lv5_0;
            elsif (((icmp_ln85_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_fu_86 <= add_ln83_reg_641;
            end if; 
        end if;
    end process;

    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_199_p2 = ap_const_lv1_0))) then 
                i_reg_117 <= ap_const_lv6_0;
            elsif (((ap_phi_mux_j_phi_fu_156_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_117 <= add_ln85_reg_654;
            end if; 
        end if;
    end process;

    j_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_151 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_151 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    phi_mul_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_199_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_128 <= ap_const_lv12_0;
            elsif (((ap_phi_mux_j_phi_fu_156_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_reg_128 <= add_ln85_1_reg_646;
            end if; 
        end if;
    end process;

    phi_urem_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_199_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_139 <= ap_const_lv6_0;
            elsif (((ap_phi_mux_j_phi_fu_156_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_urem_reg_139 <= select_ln93_fu_329_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln83_reg_641 <= add_ln83_fu_205_p2;
                    zext_ln83_2_reg_633(4 downto 0) <= zext_ln83_2_fu_195_p1(4 downto 0);
                    zext_ln83_reg_628(4 downto 0) <= zext_ln83_fu_191_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln85_1_reg_646 <= add_ln85_1_fu_211_p2;
                add_ln85_reg_654 <= add_ln85_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                and_ln18_reg_719 <= and_ln18_fu_421_p2;
                dc_reg_714 <= grp_fu_385_p_dout0;
                or_ln18_2_reg_729 <= or_ln18_2_fu_604_p2;
                res_9_reg_724 <= res_9_fu_579_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                data_V_2_reg_695 <= data_V_2_fu_301_p1;
                dc_2_reg_688 <= grp_fu_385_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                out_0_addr_reg_662 <= arrayidx121_sum_cast_fu_262_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_Result_6_reg_677 <= bitcast_ln483_4_fu_289_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_j_phi_fu_156_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                p_Result_s_reg_702 <= bitcast_ln483_fu_305_p1(31 downto 31);
            end if;
        end if;
    end process;
    zext_ln83_reg_628(9 downto 5) <= "00000";
    zext_ln83_2_reg_633(7 downto 5) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln85_fu_217_p2, ap_CS_fsm_state6, ap_phi_mux_j_phi_fu_156_p4, icmp_ln83_fu_199_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_199_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln85_fu_217_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_phi_mux_j_phi_fu_156_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln83_fu_205_p2 <= std_logic_vector(unsigned(d_fu_86) + unsigned(ap_const_lv5_1));
    add_ln85_1_fu_211_p2 <= std_logic_vector(unsigned(phi_mul_reg_128) + unsigned(ap_const_lv12_56));
    add_ln85_fu_223_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv6_1));
    add_ln93_1_fu_317_p2 <= std_logic_vector(unsigned(phi_urem_reg_139) + unsigned(ap_const_lv6_1));
    add_ln93_fu_275_p2 <= std_logic_vector(unsigned(tmp2_fu_267_p3) + unsigned(zext_ln83_reg_628));
    and_ln18_10_fu_610_p2 <= (or_ln18_2_reg_729 and and_ln18_reg_719);
    and_ln18_6_fu_522_p2 <= (xor_ln1007_fu_403_p2 and icmp_ln1003_9_fu_397_p2);
    and_ln18_7_fu_528_p2 <= (and_ln18_fu_421_p2 and and_ln18_6_fu_522_p2);
    and_ln18_8_fu_561_p2 <= (icmp_ln1007_fu_415_p2 and icmp_ln1003_10_fu_409_p2);
    and_ln18_9_fu_573_p2 <= (xor_ln18_fu_567_p2 and and_ln18_6_fu_522_p2);
    and_ln18_fu_421_p2 <= (icmp_ln1007_fu_415_p2 and icmp_ln1003_10_fu_409_p2);
    and_ln25_5_fu_427_p2 <= (icmp_ln1003_8_fu_391_p2 and icmp_ln1003_7_fu_385_p2);
    and_ln25_6_fu_439_p2 <= (xor_ln25_fu_433_p2 and and_ln25_fu_379_p2);
    and_ln25_7_fu_542_p2 <= (icmp_ln1003_8_fu_391_p2 and and_ln25_fu_379_p2);
    and_ln25_8_fu_548_p2 <= (icmp_ln1003_7_fu_385_p2 and and_ln25_7_fu_542_p2);
    and_ln25_fu_379_p2 <= (icmp_ln1003_fu_367_p2 and icmp_ln1003_6_fu_373_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln83_fu_199_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_199_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_j_phi_fu_156_p4 <= j_reg_151;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln83_fu_199_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_199_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx121_sum_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx121_sum_fu_257_p2),64));
    arrayidx121_sum_fu_257_p2 <= std_logic_vector(unsigned(tmp_8_fu_249_p3) + unsigned(zext_ln83_2_reg_633));
    bitcast_ln483_4_fu_289_p1 <= m_0_q0;
    bitcast_ln483_fu_305_p1 <= conv2221_reg_164;
    data_V_2_fu_301_p1 <= grp_fu_385_p_dout0;
    data_V_fu_337_p1 <= grp_fu_385_p_dout0;
    grp_fu_1006_p_ce <= ap_const_logic_1;
    grp_fu_1006_p_din0 <= res_10_fu_614_p3;

    grp_fu_178_p0_assign_proc : process(m_0_q0, ap_CS_fsm_state4, ap_CS_fsm_state6, conv2221_reg_164)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_178_p0 <= conv2221_reg_164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_178_p0 <= m_0_q0;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_385_p_ce <= ap_const_logic_1;
    grp_fu_385_p_din0 <= grp_fu_178_p0;
    icmp_ln1003_10_fu_409_p2 <= "1" when (tmp_13_fu_355_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_6_fu_373_p2 <= "1" when (tmp_12_fu_351_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_7_fu_385_p2 <= "1" when (tmp_13_fu_355_p4 = ap_const_lv11_0) else "0";
    icmp_ln1003_8_fu_391_p2 <= "1" when (tmp_14_fu_364_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_9_fu_397_p2 <= "1" when (tmp_fu_341_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_fu_367_p2 <= "1" when (tmp_fu_341_p4 = ap_const_lv11_0) else "0";
    icmp_ln1007_fu_415_p2 <= "0" when (tmp_14_fu_364_p1 = ap_const_lv52_0) else "1";
    icmp_ln83_fu_199_p2 <= "1" when (d_fu_86 = ap_const_lv5_10) else "0";
    icmp_ln85_fu_217_p2 <= "1" when (i_reg_117 = ap_const_lv6_2A) else "0";
    icmp_ln88_fu_233_p2 <= "1" when (trunc_ln88_fu_229_p1 = ap_const_lv2_0) else "0";
    icmp_ln93_fu_323_p2 <= "1" when (unsigned(add_ln93_1_fu_317_p2) < unsigned(ap_const_lv6_3)) else "0";
    m_0_address0 <= zext_ln93_fu_280_p1(10 - 1 downto 0);

    m_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_0_ce0 <= ap_const_logic_1;
        else 
            m_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln18_2_fu_604_p2 <= (xor_ln18_4_fu_598_p2 or and_ln25_6_fu_439_p2);
    or_ln18_fu_592_p2 <= (xor_ln18_3_fu_586_p2 or icmp_ln1003_6_fu_373_p2);

    out_0_address0_assign_proc : process(ap_CS_fsm_state3, out_0_addr_reg_662, ap_CS_fsm_state4, ap_CS_fsm_state6, arrayidx121_sum_cast_fu_262_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out_0_address0 <= out_0_addr_reg_662;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_address0 <= arrayidx121_sum_cast_fu_262_p1(8 - 1 downto 0);
        else 
            out_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_0_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, conv2221_reg_164)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_0_d0 <= conv2221_reg_164;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_d0 <= ap_const_lv32_0;
        else 
            out_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_0_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln85_fu_217_p2, ap_CS_fsm_state6, ap_phi_mux_j_phi_fu_156_p4, icmp_ln88_fu_233_p2)
    begin
        if ((((icmp_ln85_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln88_fu_233_p2 = ap_const_lv1_1)) or ((ap_phi_mux_j_phi_fu_156_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_482_p3 <= (p_Result_6_reg_677 & trunc_ln368_2_fu_479_p1);
    
    p_Result_7_fu_445_p4_proc : process(tmp_12_fu_351_p1)
    begin
        p_Result_7_fu_445_p4 <= tmp_12_fu_351_p1;
        p_Result_7_fu_445_p4(51) <= ap_const_lv1_1(0);
    end process;

    p_Result_8_fu_455_p4 <= ((p_Result_s_reg_702 & ap_const_lv11_7FF) & p_Result_7_fu_445_p4);
    p_Result_9_fu_472_p3 <= (p_Result_s_reg_702 & trunc_ln368_fu_468_p1);
    res_10_fu_614_p3 <= 
        dc_reg_714 when (and_ln18_10_fu_610_p2(0) = '1') else 
        res_9_reg_724;
    res_6_fu_515_p3 <= 
        dc_2_reg_688 when (ymaggreater_2_fu_508_p3(0) = '1') else 
        grp_fu_385_p_dout0;
    res_7_fu_534_p3 <= 
        res_fu_464_p1 when (and_ln18_7_fu_528_p2(0) = '1') else 
        res_6_fu_515_p3;
    res_8_fu_554_p3 <= 
        dc_2_reg_688 when (and_ln25_8_fu_548_p2(0) = '1') else 
        res_7_fu_534_p3;
    res_9_fu_579_p3 <= 
        dc_2_reg_688 when (and_ln18_9_fu_573_p2(0) = '1') else 
        res_8_fu_554_p3;
    res_fu_464_p1 <= p_Result_8_fu_455_p4;
    select_ln39_fu_501_p3 <= 
        xor_ln39_fu_495_p2 when (p_Result_s_reg_702(0) = '1') else 
        ymaggreater_fu_489_p2;
    select_ln93_fu_329_p3 <= 
        add_ln93_1_fu_317_p2 when (icmp_ln93_fu_323_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp2_fu_267_p3 <= (i_reg_117 & ap_const_lv4_0);
    tmp_12_fu_351_p1 <= data_V_fu_337_p1(52 - 1 downto 0);
    tmp_13_fu_355_p4 <= data_V_2_reg_695(62 downto 52);
    tmp_14_fu_364_p1 <= data_V_2_reg_695(52 - 1 downto 0);
    tmp_7_fu_239_p4 <= phi_mul_reg_128(11 downto 8);
    tmp_8_fu_249_p3 <= (tmp_7_fu_239_p4 & ap_const_lv4_0);
    tmp_fu_341_p4 <= data_V_fu_337_p1(62 downto 52);
    trunc_ln368_2_fu_479_p1 <= data_V_2_reg_695(63 - 1 downto 0);
    trunc_ln368_fu_468_p1 <= data_V_fu_337_p1(63 - 1 downto 0);
    trunc_ln88_fu_229_p1 <= phi_urem_reg_139(2 - 1 downto 0);
    xor_ln1007_fu_403_p2 <= (icmp_ln1003_6_fu_373_p2 xor ap_const_lv1_1);
    xor_ln18_3_fu_586_p2 <= (icmp_ln1003_9_fu_397_p2 xor ap_const_lv1_1);
    xor_ln18_4_fu_598_p2 <= (or_ln18_fu_592_p2 xor and_ln25_fu_379_p2);
    xor_ln18_fu_567_p2 <= (ap_const_lv1_1 xor and_ln18_8_fu_561_p2);
    xor_ln25_fu_433_p2 <= (ap_const_lv1_1 xor and_ln25_5_fu_427_p2);
    xor_ln39_fu_495_p2 <= (ymaggreater_fu_489_p2 xor ap_const_lv1_1);
    ymaggreater_2_fu_508_p3 <= 
        select_ln39_fu_501_p3 when (p_Result_6_reg_677(0) = '1') else 
        ymaggreater_fu_489_p2;
    ymaggreater_fu_489_p2 <= "1" when (signed(p_Result_9_fu_472_p3) < signed(p_Result_10_fu_482_p3)) else "0";
    zext_ln83_2_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_86),8));
    zext_ln83_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_86),10));
    zext_ln93_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_fu_275_p2),64));
end behav;
