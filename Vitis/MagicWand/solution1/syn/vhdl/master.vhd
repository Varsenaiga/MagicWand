-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "master_master,hls_ip_2021_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.506914,HLS_SYN_LAT=300763,HLS_SYN_TPT=none,HLS_SYN_MEM=44,HLS_SYN_DSP=0,HLS_SYN_FF=5563,HLS_SYN_LUT=9279,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_BFB699C3 : STD_LOGIC_VECTOR (31 downto 0) := "10111111101101101001100111000011";
    constant ap_const_lv32_3F8B87E9 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100010111000011111101001";
    constant ap_const_lv32_BF9A83AC : STD_LOGIC_VECTOR (31 downto 0) := "10111111100110101000001110101100";
    constant ap_const_lv32_BE3D494C : STD_LOGIC_VECTOR (31 downto 0) := "10111110001111010100100101001100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal thirdBias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal thirdBias_ce0 : STD_LOGIC;
    signal thirdBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal firstDense_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal firstDense_ce0 : STD_LOGIC;
    signal firstDense_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal secondDense_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal secondDense_ce0 : STD_LOGIC;
    signal secondDense_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln138_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal add_ln103_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln103_reg_792 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln103_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal den1_0_addr_reg_802 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_40_fu_467_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_40_reg_807 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal empty_41_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_41_reg_849 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln106_fu_506_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln106_reg_857 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_6_fu_512_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln106_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln110_fu_520_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln110_reg_867 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln110_fu_538_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln110_reg_875 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln110_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln124_fu_641_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln124_reg_903 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal trunc_ln126_fu_647_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln126_reg_908 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln124_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_651_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_665_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_917 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln127_fu_698_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln127_reg_939 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln127_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal den1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_4_fu_757_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_load_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_1_load_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_2_load_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_3_load_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_992 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal conv1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv1_ce0 : STD_LOGIC;
    signal conv1_we0 : STD_LOGIC;
    signal conv1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max1_0_ce0 : STD_LOGIC;
    signal max1_0_we0 : STD_LOGIC;
    signal max1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_0_ce1 : STD_LOGIC;
    signal max1_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_0_ce0 : STD_LOGIC;
    signal conv2_0_we0 : STD_LOGIC;
    signal conv2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max2_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max2_0_ce0 : STD_LOGIC;
    signal max2_0_we0 : STD_LOGIC;
    signal den1_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal den1_0_ce0 : STD_LOGIC;
    signal den1_0_we0 : STD_LOGIC;
    signal den1_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_ap_start : STD_LOGIC;
    signal grp_convolution1_1_fu_326_ap_done : STD_LOGIC;
    signal grp_convolution1_1_fu_326_ap_idle : STD_LOGIC;
    signal grp_convolution1_1_fu_326_ap_ready : STD_LOGIC;
    signal grp_convolution1_1_fu_326_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution1_1_fu_326_input_r_ce0 : STD_LOGIC;
    signal grp_convolution1_1_fu_326_input_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution1_1_fu_326_input_r_ce1 : STD_LOGIC;
    signal grp_convolution1_1_fu_326_out_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution1_1_fu_326_out_r_ce0 : STD_LOGIC;
    signal grp_convolution1_1_fu_326_out_r_we0 : STD_LOGIC;
    signal grp_convolution1_1_fu_326_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_371_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_371_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_371_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_371_p_ce : STD_LOGIC;
    signal grp_convolution1_1_fu_326_grp_fu_377_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_377_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_377_p_ce : STD_LOGIC;
    signal grp_convolution1_1_fu_326_grp_fu_1002_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_1002_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_1002_p_ce : STD_LOGIC;
    signal grp_convolution1_1_fu_326_grp_fu_388_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_388_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_388_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolution1_1_fu_326_grp_fu_388_p_ce : STD_LOGIC;
    signal grp_maxPool_1_fu_338_ap_start : STD_LOGIC;
    signal grp_maxPool_1_fu_338_ap_done : STD_LOGIC;
    signal grp_maxPool_1_fu_338_ap_idle : STD_LOGIC;
    signal grp_maxPool_1_fu_338_ap_ready : STD_LOGIC;
    signal grp_maxPool_1_fu_338_m_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_maxPool_1_fu_338_m_ce0 : STD_LOGIC;
    signal grp_maxPool_1_fu_338_out_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_maxPool_1_fu_338_out_0_ce0 : STD_LOGIC;
    signal grp_maxPool_1_fu_338_out_0_we0 : STD_LOGIC;
    signal grp_maxPool_1_fu_338_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxPool_1_fu_338_grp_fu_1006_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_maxPool_1_fu_338_grp_fu_1006_p_ce : STD_LOGIC;
    signal grp_maxPool_1_fu_338_grp_fu_385_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxPool_1_fu_338_grp_fu_385_p_ce : STD_LOGIC;
    signal grp_maxPool_1_fu_338_grp_fu_1009_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxPool_1_fu_338_grp_fu_1009_p_ce : STD_LOGIC;
    signal grp_convolution2_fu_344_ap_start : STD_LOGIC;
    signal grp_convolution2_fu_344_ap_done : STD_LOGIC;
    signal grp_convolution2_fu_344_ap_idle : STD_LOGIC;
    signal grp_convolution2_fu_344_ap_ready : STD_LOGIC;
    signal grp_convolution2_fu_344_m_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fu_344_m_0_ce0 : STD_LOGIC;
    signal grp_convolution2_fu_344_m_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fu_344_m_0_ce1 : STD_LOGIC;
    signal grp_convolution2_fu_344_out_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution2_fu_344_out_0_ce0 : STD_LOGIC;
    signal grp_convolution2_fu_344_out_0_we0 : STD_LOGIC;
    signal grp_convolution2_fu_344_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_371_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_371_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_371_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution2_fu_344_grp_fu_371_p_ce : STD_LOGIC;
    signal grp_convolution2_fu_344_grp_fu_377_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_377_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_377_p_ce : STD_LOGIC;
    signal grp_convolution2_fu_344_grp_fu_1002_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_1002_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_1002_p_ce : STD_LOGIC;
    signal grp_convolution2_fu_344_grp_fu_388_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_388_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fu_344_grp_fu_388_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_convolution2_fu_344_grp_fu_388_p_ce : STD_LOGIC;
    signal grp_maxPool_fu_354_ap_start : STD_LOGIC;
    signal grp_maxPool_fu_354_ap_done : STD_LOGIC;
    signal grp_maxPool_fu_354_ap_idle : STD_LOGIC;
    signal grp_maxPool_fu_354_ap_ready : STD_LOGIC;
    signal grp_maxPool_fu_354_m_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_maxPool_fu_354_m_0_ce0 : STD_LOGIC;
    signal grp_maxPool_fu_354_out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_maxPool_fu_354_out_0_ce0 : STD_LOGIC;
    signal grp_maxPool_fu_354_out_0_we0 : STD_LOGIC;
    signal grp_maxPool_fu_354_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxPool_fu_354_grp_fu_1006_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_maxPool_fu_354_grp_fu_1006_p_ce : STD_LOGIC;
    signal grp_maxPool_fu_354_grp_fu_385_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxPool_fu_354_grp_fu_385_p_ce : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_idle : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_ready : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_ce0 : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_we0 : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_ce : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_ce : STD_LOGIC;
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_ce : STD_LOGIC;
    signal i_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_lcssa_lcssa14_i_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_reg_282 : STD_LOGIC_VECTOR (4 downto 0);
    signal add11_i_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_305 : STD_LOGIC_VECTOR (4 downto 0);
    signal den2_0_0_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_1_fu_326_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_maxPool_1_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_convolution2_fu_344_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_maxPool_fu_354_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal zext_ln103_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_1_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_2_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_140 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_1_fu_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal den2_0_3_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_1_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_2_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_0_3_3_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal i_1_fu_188 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln138_fu_747_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal p_shl1_fu_483_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_476_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_490_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln110_1_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln112_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_554_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_fu_563_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln112_1_fu_571_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln116_fu_581_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_585_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_fu_595_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln116_1_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln116_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln116_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln116_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln128_1_fu_688_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln128_fu_704_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_757_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_371_ce : STD_LOGIC;
    signal grp_fu_377_ce : STD_LOGIC;
    signal grp_fu_385_ce : STD_LOGIC;
    signal grp_fu_388_ce : STD_LOGIC;
    signal grp_fu_388_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_398_ce : STD_LOGIC;
    signal grp_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1002_ce : STD_LOGIC;
    signal grp_fu_1006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1006_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1006_ce : STD_LOGIC;
    signal grp_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1009_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1009_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_convolution1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_371_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_ce : OUT STD_LOGIC;
        grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_ce : OUT STD_LOGIC;
        grp_fu_1002_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1002_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1002_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1002_p_ce : OUT STD_LOGIC;
        grp_fu_388_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_388_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_388_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_388_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_388_p_ce : OUT STD_LOGIC );
    end component;


    component master_maxPool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1006_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1006_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1006_p_ce : OUT STD_LOGIC;
        grp_fu_385_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_385_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_385_p_ce : OUT STD_LOGIC;
        grp_fu_1009_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1009_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1009_p_ce : OUT STD_LOGIC );
    end component;


    component master_convolution2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_ce0 : OUT STD_LOGIC;
        m_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_ce1 : OUT STD_LOGIC;
        m_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_371_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_371_p_ce : OUT STD_LOGIC;
        grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_377_p_ce : OUT STD_LOGIC;
        grp_fu_1002_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1002_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1002_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1002_p_ce : OUT STD_LOGIC;
        grp_fu_388_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_388_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_388_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_388_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_388_p_ce : OUT STD_LOGIC );
    end component;


    component master_maxPool IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        m_0_ce0 : OUT STD_LOGIC;
        m_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1006_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1006_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1006_p_ce : OUT STD_LOGIC;
        grp_fu_385_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_385_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_385_p_ce : OUT STD_LOGIC );
    end component;


    component master_master_Pipeline_VITIS_LOOP_143_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        den2_0_0_01 : IN STD_LOGIC_VECTOR (31 downto 0);
        den2_0_1_02 : IN STD_LOGIC_VECTOR (31 downto 0);
        den2_0_2_03 : IN STD_LOGIC_VECTOR (31 downto 0);
        den2_0_3_04 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1006_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1006_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1006_p_ce : OUT STD_LOGIC;
        grp_fu_1009_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_1009_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1009_p_ce : OUT STD_LOGIC;
        grp_fu_398_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_398_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_398_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_398_p_ce : OUT STD_LOGIC );
    end component;


    component master_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component master_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_dexp_64ns_64ns_64_11_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_thirdBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_firstDense IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_secondDense IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_max1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_conv2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_max2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_den1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    thirdBias_U : component master_thirdBias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => thirdBias_address0,
        ce0 => thirdBias_ce0,
        q0 => thirdBias_q0);

    firstDense_U : component master_firstDense
    generic map (
        DataWidth => 32,
        AddressRange => 3584,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstDense_address0,
        ce0 => firstDense_ce0,
        q0 => firstDense_q0);

    secondDense_U : component master_secondDense
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondDense_address0,
        ce0 => secondDense_ce0,
        q0 => secondDense_q0);

    conv1_U : component master_conv1
    generic map (
        DataWidth => 32,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_address0,
        ce0 => conv1_ce0,
        we0 => conv1_we0,
        d0 => grp_convolution1_1_fu_326_out_r_d0,
        q0 => conv1_q0);

    max1_0_U : component master_max1_0
    generic map (
        DataWidth => 32,
        AddressRange => 336,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max1_0_address0,
        ce0 => max1_0_ce0,
        we0 => max1_0_we0,
        d0 => grp_maxPool_1_fu_338_out_0_d0,
        q0 => max1_0_q0,
        address1 => grp_convolution2_fu_344_m_0_address1,
        ce1 => max1_0_ce1,
        q1 => max1_0_q1);

    conv2_0_U : component master_conv2_0
    generic map (
        DataWidth => 32,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_0_address0,
        ce0 => conv2_0_ce0,
        we0 => conv2_0_we0,
        d0 => grp_convolution2_fu_344_out_0_d0,
        q0 => conv2_0_q0);

    max2_0_U : component master_max2_0
    generic map (
        DataWidth => 32,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max2_0_address0,
        ce0 => max2_0_ce0,
        we0 => max2_0_we0,
        d0 => grp_maxPool_fu_354_out_0_d0,
        q0 => max2_0_q0);

    den1_0_U : component master_den1_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => den1_0_address0,
        ce0 => den1_0_ce0,
        we0 => den1_0_we0,
        d0 => den1_0_d0,
        q0 => den1_0_q0);

    grp_convolution1_1_fu_326 : component master_convolution1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution1_1_fu_326_ap_start,
        ap_done => grp_convolution1_1_fu_326_ap_done,
        ap_idle => grp_convolution1_1_fu_326_ap_idle,
        ap_ready => grp_convolution1_1_fu_326_ap_ready,
        input_r_address0 => grp_convolution1_1_fu_326_input_r_address0,
        input_r_ce0 => grp_convolution1_1_fu_326_input_r_ce0,
        input_r_q0 => input_r_q0,
        input_r_address1 => grp_convolution1_1_fu_326_input_r_address1,
        input_r_ce1 => grp_convolution1_1_fu_326_input_r_ce1,
        input_r_q1 => input_r_q1,
        out_r_address0 => grp_convolution1_1_fu_326_out_r_address0,
        out_r_ce0 => grp_convolution1_1_fu_326_out_r_ce0,
        out_r_we0 => grp_convolution1_1_fu_326_out_r_we0,
        out_r_d0 => grp_convolution1_1_fu_326_out_r_d0,
        grp_fu_371_p_din0 => grp_convolution1_1_fu_326_grp_fu_371_p_din0,
        grp_fu_371_p_din1 => grp_convolution1_1_fu_326_grp_fu_371_p_din1,
        grp_fu_371_p_opcode => grp_convolution1_1_fu_326_grp_fu_371_p_opcode,
        grp_fu_371_p_dout0 => grp_fu_371_p2,
        grp_fu_371_p_ce => grp_convolution1_1_fu_326_grp_fu_371_p_ce,
        grp_fu_377_p_din0 => grp_convolution1_1_fu_326_grp_fu_377_p_din0,
        grp_fu_377_p_din1 => grp_convolution1_1_fu_326_grp_fu_377_p_din1,
        grp_fu_377_p_dout0 => grp_fu_377_p2,
        grp_fu_377_p_ce => grp_convolution1_1_fu_326_grp_fu_377_p_ce,
        grp_fu_1002_p_din0 => grp_convolution1_1_fu_326_grp_fu_1002_p_din0,
        grp_fu_1002_p_din1 => grp_convolution1_1_fu_326_grp_fu_1002_p_din1,
        grp_fu_1002_p_dout0 => grp_fu_1002_p2,
        grp_fu_1002_p_ce => grp_convolution1_1_fu_326_grp_fu_1002_p_ce,
        grp_fu_388_p_din0 => grp_convolution1_1_fu_326_grp_fu_388_p_din0,
        grp_fu_388_p_din1 => grp_convolution1_1_fu_326_grp_fu_388_p_din1,
        grp_fu_388_p_opcode => grp_convolution1_1_fu_326_grp_fu_388_p_opcode,
        grp_fu_388_p_dout0 => grp_fu_388_p2,
        grp_fu_388_p_ce => grp_convolution1_1_fu_326_grp_fu_388_p_ce);

    grp_maxPool_1_fu_338 : component master_maxPool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_maxPool_1_fu_338_ap_start,
        ap_done => grp_maxPool_1_fu_338_ap_done,
        ap_idle => grp_maxPool_1_fu_338_ap_idle,
        ap_ready => grp_maxPool_1_fu_338_ap_ready,
        m_address0 => grp_maxPool_1_fu_338_m_address0,
        m_ce0 => grp_maxPool_1_fu_338_m_ce0,
        m_q0 => conv1_q0,
        out_0_address0 => grp_maxPool_1_fu_338_out_0_address0,
        out_0_ce0 => grp_maxPool_1_fu_338_out_0_ce0,
        out_0_we0 => grp_maxPool_1_fu_338_out_0_we0,
        out_0_d0 => grp_maxPool_1_fu_338_out_0_d0,
        out_0_q0 => max1_0_q0,
        grp_fu_1006_p_din0 => grp_maxPool_1_fu_338_grp_fu_1006_p_din0,
        grp_fu_1006_p_dout0 => grp_fu_1006_p1,
        grp_fu_1006_p_ce => grp_maxPool_1_fu_338_grp_fu_1006_p_ce,
        grp_fu_385_p_din0 => grp_maxPool_1_fu_338_grp_fu_385_p_din0,
        grp_fu_385_p_dout0 => grp_fu_385_p1,
        grp_fu_385_p_ce => grp_maxPool_1_fu_338_grp_fu_385_p_ce,
        grp_fu_1009_p_din0 => grp_maxPool_1_fu_338_grp_fu_1009_p_din0,
        grp_fu_1009_p_dout0 => grp_fu_1009_p1,
        grp_fu_1009_p_ce => grp_maxPool_1_fu_338_grp_fu_1009_p_ce);

    grp_convolution2_fu_344 : component master_convolution2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution2_fu_344_ap_start,
        ap_done => grp_convolution2_fu_344_ap_done,
        ap_idle => grp_convolution2_fu_344_ap_idle,
        ap_ready => grp_convolution2_fu_344_ap_ready,
        m_0_address0 => grp_convolution2_fu_344_m_0_address0,
        m_0_ce0 => grp_convolution2_fu_344_m_0_ce0,
        m_0_q0 => max1_0_q0,
        m_0_address1 => grp_convolution2_fu_344_m_0_address1,
        m_0_ce1 => grp_convolution2_fu_344_m_0_ce1,
        m_0_q1 => max1_0_q1,
        out_0_address0 => grp_convolution2_fu_344_out_0_address0,
        out_0_ce0 => grp_convolution2_fu_344_out_0_ce0,
        out_0_we0 => grp_convolution2_fu_344_out_0_we0,
        out_0_d0 => grp_convolution2_fu_344_out_0_d0,
        grp_fu_371_p_din0 => grp_convolution2_fu_344_grp_fu_371_p_din0,
        grp_fu_371_p_din1 => grp_convolution2_fu_344_grp_fu_371_p_din1,
        grp_fu_371_p_opcode => grp_convolution2_fu_344_grp_fu_371_p_opcode,
        grp_fu_371_p_dout0 => grp_fu_371_p2,
        grp_fu_371_p_ce => grp_convolution2_fu_344_grp_fu_371_p_ce,
        grp_fu_377_p_din0 => grp_convolution2_fu_344_grp_fu_377_p_din0,
        grp_fu_377_p_din1 => grp_convolution2_fu_344_grp_fu_377_p_din1,
        grp_fu_377_p_dout0 => grp_fu_377_p2,
        grp_fu_377_p_ce => grp_convolution2_fu_344_grp_fu_377_p_ce,
        grp_fu_1002_p_din0 => grp_convolution2_fu_344_grp_fu_1002_p_din0,
        grp_fu_1002_p_din1 => grp_convolution2_fu_344_grp_fu_1002_p_din1,
        grp_fu_1002_p_dout0 => grp_fu_1002_p2,
        grp_fu_1002_p_ce => grp_convolution2_fu_344_grp_fu_1002_p_ce,
        grp_fu_388_p_din0 => grp_convolution2_fu_344_grp_fu_388_p_din0,
        grp_fu_388_p_din1 => grp_convolution2_fu_344_grp_fu_388_p_din1,
        grp_fu_388_p_opcode => grp_convolution2_fu_344_grp_fu_388_p_opcode,
        grp_fu_388_p_dout0 => grp_fu_388_p2,
        grp_fu_388_p_ce => grp_convolution2_fu_344_grp_fu_388_p_ce);

    grp_maxPool_fu_354 : component master_maxPool
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_maxPool_fu_354_ap_start,
        ap_done => grp_maxPool_fu_354_ap_done,
        ap_idle => grp_maxPool_fu_354_ap_idle,
        ap_ready => grp_maxPool_fu_354_ap_ready,
        m_0_address0 => grp_maxPool_fu_354_m_0_address0,
        m_0_ce0 => grp_maxPool_fu_354_m_0_ce0,
        m_0_q0 => conv2_0_q0,
        out_0_address0 => grp_maxPool_fu_354_out_0_address0,
        out_0_ce0 => grp_maxPool_fu_354_out_0_ce0,
        out_0_we0 => grp_maxPool_fu_354_out_0_we0,
        out_0_d0 => grp_maxPool_fu_354_out_0_d0,
        out_0_q0 => max2_0_q0,
        grp_fu_1006_p_din0 => grp_maxPool_fu_354_grp_fu_1006_p_din0,
        grp_fu_1006_p_dout0 => grp_fu_1006_p1,
        grp_fu_1006_p_ce => grp_maxPool_fu_354_grp_fu_1006_p_ce,
        grp_fu_385_p_din0 => grp_maxPool_fu_354_grp_fu_385_p_din0,
        grp_fu_385_p_dout0 => grp_fu_385_p1,
        grp_fu_385_p_ce => grp_maxPool_fu_354_grp_fu_385_p_ce);

    grp_master_Pipeline_VITIS_LOOP_143_2_fu_360 : component master_master_Pipeline_VITIS_LOOP_143_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start,
        ap_done => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done,
        ap_idle => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_idle,
        ap_ready => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_ready,
        den2_0_0_01 => den2_0_3_load_reg_972,
        den2_0_1_02 => den2_0_3_1_load_reg_977,
        den2_0_2_03 => den2_0_3_2_load_reg_982,
        den2_0_3_04 => den2_0_3_3_load_reg_987,
        sum => reg_435,
        out_r_address0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_address0,
        out_r_ce0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_ce0,
        out_r_we0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_we0,
        out_r_d0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_d0,
        grp_fu_1006_p_din0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_din0,
        grp_fu_1006_p_dout0 => grp_fu_1006_p1,
        grp_fu_1006_p_ce => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_ce,
        grp_fu_1009_p_din0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_din0,
        grp_fu_1009_p_dout0 => grp_fu_1009_p1,
        grp_fu_1009_p_ce => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_ce,
        grp_fu_398_p_din0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din0,
        grp_fu_398_p_din1 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din1,
        grp_fu_398_p_dout0 => grp_fu_398_p2,
        grp_fu_398_p_ce => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_ce);

    fadd_32ns_32ns_32_4_full_dsp_1_U49 : component master_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_371_p0,
        din1 => grp_fu_371_p1,
        ce => grp_fu_371_ce,
        dout => grp_fu_371_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U50 : component master_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        ce => grp_fu_377_ce,
        dout => grp_fu_377_p2);

    fpext_32ns_64_2_no_dsp_1_U51 : component master_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_385_p0,
        ce => grp_fu_385_ce,
        dout => grp_fu_385_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U52 : component master_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_388_p0,
        din1 => grp_fu_388_p1,
        ce => grp_fu_388_ce,
        opcode => grp_fu_388_opcode,
        dout => grp_fu_388_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U53 : component master_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_fu_184,
        din1 => tmp_reg_997,
        ce => ap_const_logic_1,
        dout => grp_fu_394_p2);

    dexp_64ns_64ns_64_11_full_dsp_1_U54 : component master_dexp_64ns_64ns_64_11_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din0,
        din1 => grp_fu_398_p1,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p2);

    mux_42_32_1_1_U55 : component master_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BFB699C3,
        din1 => ap_const_lv32_3F8B87E9,
        din2 => ap_const_lv32_BF9A83AC,
        din3 => ap_const_lv32_BE3D494C,
        din4 => trunc_ln126_fu_647_p1,
        dout => tmp_s_fu_651_p6);

    mux_42_32_1_1_U56 : component master_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => den2_0_3_fu_168,
        din1 => den2_0_3_1_fu_172,
        din2 => den2_0_3_2_fu_176,
        din3 => den2_0_3_3_fu_180,
        din4 => tmp_4_fu_757_p5,
        dout => tmp_4_fu_757_p6);

    fmul_32ns_32ns_32_3_max_dsp_1_U57 : component master_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1002_p0,
        din1 => grp_fu_1002_p1,
        ce => grp_fu_1002_ce,
        dout => grp_fu_1002_p2);

    fptrunc_64ns_32_2_no_dsp_1_U58 : component master_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1006_p0,
        ce => grp_fu_1006_ce,
        dout => grp_fu_1006_p1);

    fpext_32ns_64_2_no_dsp_1_U59 : component master_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1009_p0,
        ce => grp_fu_1009_ce,
        dout => grp_fu_1009_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution1_1_fu_326_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution1_1_fu_326_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convolution1_1_fu_326_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution1_1_fu_326_ap_ready = ap_const_logic_1)) then 
                    grp_convolution1_1_fu_326_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution2_fu_344_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution2_fu_344_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_convolution2_fu_344_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution2_fu_344_ap_ready = ap_const_logic_1)) then 
                    grp_convolution2_fu_344_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln138_fu_741_p2 = ap_const_lv1_1))) then 
                    grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_ready = ap_const_logic_1)) then 
                    grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_maxPool_1_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_maxPool_1_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_maxPool_1_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_maxPool_1_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_maxPool_1_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_maxPool_fu_354_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_maxPool_fu_354_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_maxPool_fu_354_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_maxPool_fu_354_ap_ready = ap_const_logic_1)) then 
                    grp_maxPool_fu_354_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add11_i_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln106_fu_500_p2 = ap_const_lv1_0))) then 
                add11_i_reg_293 <= add_lcssa_lcssa14_i_reg_272;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                add11_i_reg_293 <= grp_fu_371_p2;
            end if; 
        end if;
    end process;

    add_lcssa_lcssa14_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                add_lcssa_lcssa14_i_reg_272 <= thirdBias_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln110_fu_532_p2 = ap_const_lv1_1))) then 
                add_lcssa_lcssa14_i_reg_272 <= add11_i_reg_293;
            end if; 
        end if;
    end process;

    d_1_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln103_fu_455_p2 = ap_const_lv1_1))) then 
                d_1_fu_164 <= ap_const_lv3_0;
            elsif (((icmp_ln127_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                d_1_fu_164 <= add_ln124_reg_903;
            end if; 
        end if;
    end process;

    d_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_140 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln106_fu_500_p2 = ap_const_lv1_1))) then 
                d_fu_140 <= add_ln103_reg_792;
            end if; 
        end if;
    end process;

    den2_0_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                den2_0_0_reg_316 <= tmp_s_fu_651_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                den2_0_0_reg_316 <= grp_fu_371_p2;
            end if; 
        end if;
    end process;

    h_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln106_fu_500_p2 = ap_const_lv1_0))) then 
                h_reg_282 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                h_reg_282 <= add_ln110_reg_875;
            end if; 
        end if;
    end process;

    i_1_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_635_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_1_fu_188 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln138_fu_741_p2 = ap_const_lv1_0))) then 
                i_1_fu_188 <= add_ln138_fu_747_p2;
            end if; 
        end if;
    end process;

    i_2_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                i_2_reg_305 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_2_reg_305 <= add_ln127_reg_939;
            end if; 
        end if;
    end process;

    i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_261 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln110_fu_532_p2 = ap_const_lv1_1))) then 
                i_reg_261 <= add_ln106_reg_857;
            end if; 
        end if;
    end process;

    sum_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_635_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                sum_fu_184 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                sum_fu_184 <= grp_fu_394_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln103_reg_792 <= add_ln103_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln106_reg_857 <= add_ln106_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln110_reg_875 <= add_ln110_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln124_reg_903 <= add_ln124_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln127_reg_939 <= add_ln127_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                conv_i_reg_992 <= grp_fu_385_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln103_fu_455_p2 = ap_const_lv1_0))) then
                den1_0_addr_reg_802 <= zext_ln103_fu_449_p1(4 - 1 downto 0);
                empty_40_reg_807 <= empty_40_fu_467_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_692_p2 = ap_const_lv1_1) and (trunc_ln126_reg_908 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                den2_0_3_1_fu_172 <= den2_0_0_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln138_fu_741_p2 = ap_const_lv1_1))) then
                den2_0_3_1_load_reg_977 <= den2_0_3_1_fu_172;
                den2_0_3_2_load_reg_982 <= den2_0_3_2_fu_176;
                den2_0_3_3_load_reg_987 <= den2_0_3_3_fu_180;
                den2_0_3_load_reg_972 <= den2_0_3_fu_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_692_p2 = ap_const_lv1_1) and (trunc_ln126_reg_908 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                den2_0_3_2_fu_176 <= den2_0_0_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_692_p2 = ap_const_lv1_1) and (trunc_ln126_reg_908 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                den2_0_3_3_fu_180 <= den2_0_0_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_692_p2 = ap_const_lv1_1) and (trunc_ln126_reg_908 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                den2_0_3_fu_168 <= den2_0_0_reg_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    empty_41_reg_849(11 downto 5) <= empty_41_fu_494_p2(11 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_424 <= grp_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln138_fu_741_p2 = ap_const_lv1_1)))) then
                reg_435 <= sum_fu_184;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln124_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    tmp_2_reg_917(5 downto 4) <= tmp_2_fu_665_p3(5 downto 4);
                trunc_ln126_reg_908 <= trunc_ln126_fu_647_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln106_fu_500_p2 = ap_const_lv1_0))) then
                    tmp_6_reg_862(7 downto 4) <= tmp_6_fu_512_p3(7 downto 4);
                    zext_ln110_reg_867(7 downto 4) <= zext_ln110_fu_520_p1(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                tmp_reg_997 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    empty_41_reg_849(4 downto 0) <= "00000";
    tmp_6_reg_862(3 downto 0) <= "0000";
    zext_ln110_reg_867(3 downto 0) <= "0000";
    zext_ln110_reg_867(11 downto 8) <= "0000";
    tmp_2_reg_917(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state30, icmp_ln138_fu_741_p2, ap_CS_fsm_state9, icmp_ln103_fu_455_p2, ap_CS_fsm_state11, icmp_ln106_fu_500_p2, ap_CS_fsm_state12, icmp_ln110_fu_532_p2, ap_CS_fsm_state21, icmp_ln124_fu_635_p2, ap_CS_fsm_state22, icmp_ln127_fu_692_p2, grp_convolution1_1_fu_326_ap_done, grp_maxPool_1_fu_338_ap_done, grp_convolution2_fu_344_ap_done, grp_maxPool_fu_354_ap_done, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state48)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_convolution1_1_fu_326_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_maxPool_1_fu_338_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_convolution2_fu_344_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_maxPool_fu_354_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln103_fu_455_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln106_fu_500_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln110_fu_532_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln124_fu_635_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln127_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (icmp_ln138_fu_741_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state48 => 
                if (((grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_fu_461_p2 <= std_logic_vector(unsigned(d_fu_140) + unsigned(ap_const_lv5_1));
    add_ln106_fu_506_p2 <= std_logic_vector(unsigned(i_reg_261) + unsigned(ap_const_lv4_1));
    add_ln110_fu_538_p2 <= std_logic_vector(unsigned(h_reg_282) + unsigned(ap_const_lv5_1));
    add_ln112_1_fu_571_p2 <= std_logic_vector(unsigned(tmp5_fu_563_p3) + unsigned(zext_ln110_reg_867));
    add_ln112_fu_544_p2 <= std_logic_vector(unsigned(zext_ln110_1_fu_528_p1) + unsigned(tmp_6_reg_862));
    add_ln124_fu_641_p2 <= std_logic_vector(unsigned(d_1_fu_164) + unsigned(ap_const_lv3_1));
    add_ln127_fu_698_p2 <= std_logic_vector(unsigned(i_2_reg_305) + unsigned(ap_const_lv5_1));
    add_ln128_fu_704_p2 <= std_logic_vector(unsigned(zext_ln128_1_fu_688_p1) + unsigned(tmp_2_reg_917));
    add_ln138_fu_747_p2 <= std_logic_vector(unsigned(i_1_fu_188) + unsigned(ap_const_lv3_1));
    and_ln116_fu_617_p2 <= (or_ln116_fu_611_p2 and grp_fu_388_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_convolution1_1_fu_326_ap_done)
    begin
        if ((grp_convolution1_1_fu_326_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;

    ap_ST_fsm_state48_blk_assign_proc : process(grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done)
    begin
        if ((grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_maxPool_1_fu_338_ap_done)
    begin
        if ((grp_maxPool_1_fu_338_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_convolution2_fu_344_ap_done)
    begin
        if ((grp_convolution2_fu_344_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_maxPool_fu_354_ap_done)
    begin
        if ((grp_maxPool_fu_354_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done, ap_CS_fsm_state48)
    begin
        if (((grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done, ap_CS_fsm_state48)
    begin
        if (((grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln116_fu_581_p1 <= add_lcssa_lcssa14_i_reg_272;

    conv1_address0_assign_proc : process(grp_convolution1_1_fu_326_out_r_address0, grp_maxPool_1_fu_338_m_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_address0 <= grp_maxPool_1_fu_338_m_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_address0 <= grp_convolution1_1_fu_326_out_r_address0;
        else 
            conv1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv1_ce0_assign_proc : process(grp_convolution1_1_fu_326_out_r_ce0, grp_maxPool_1_fu_338_m_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv1_ce0 <= grp_maxPool_1_fu_338_m_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_ce0 <= grp_convolution1_1_fu_326_out_r_ce0;
        else 
            conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_we0_assign_proc : process(grp_convolution1_1_fu_326_out_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_we0 <= grp_convolution1_1_fu_326_out_r_we0;
        else 
            conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_0_address0_assign_proc : process(grp_convolution2_fu_344_out_0_address0, grp_maxPool_fu_354_m_0_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv2_0_address0 <= grp_maxPool_fu_354_m_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_0_address0 <= grp_convolution2_fu_344_out_0_address0;
        else 
            conv2_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_0_ce0_assign_proc : process(grp_convolution2_fu_344_out_0_ce0, grp_maxPool_fu_354_m_0_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv2_0_ce0 <= grp_maxPool_fu_354_m_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_0_ce0 <= grp_convolution2_fu_344_out_0_ce0;
        else 
            conv2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_0_we0_assign_proc : process(grp_convolution2_fu_344_out_0_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_0_we0 <= grp_convolution2_fu_344_out_0_we0;
        else 
            conv2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    den1_0_address0_assign_proc : process(den1_0_addr_reg_802, ap_CS_fsm_state22, zext_ln128_fu_683_p1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            den1_0_address0 <= zext_ln128_fu_683_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            den1_0_address0 <= den1_0_addr_reg_802;
        else 
            den1_0_address0 <= "XXXX";
        end if; 
    end process;


    den1_0_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            den1_0_ce0 <= ap_const_logic_1;
        else 
            den1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    den1_0_d0 <= 
        ap_const_lv32_0 when (and_ln116_fu_617_p2(0) = '1') else 
        add_lcssa_lcssa14_i_reg_272;

    den1_0_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            den1_0_we0 <= ap_const_logic_1;
        else 
            den1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_40_fu_467_p1 <= d_fu_140(4 - 1 downto 0);
    empty_41_fu_494_p2 <= std_logic_vector(unsigned(p_shl_fu_476_p3) - unsigned(p_shl1_cast_fu_490_p1));
    firstDense_address0 <= zext_ln112_1_fu_576_p1(12 - 1 downto 0);

    firstDense_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            firstDense_ce0 <= ap_const_logic_1;
        else 
            firstDense_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution1_1_fu_326_ap_start <= grp_convolution1_1_fu_326_ap_start_reg;
    grp_convolution2_fu_344_ap_start <= grp_convolution2_fu_344_ap_start_reg;

    grp_fu_1002_ce_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_1002_p_ce, grp_convolution2_fu_344_grp_fu_1002_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_1002_ce <= grp_convolution2_fu_344_grp_fu_1002_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_1002_ce <= grp_convolution1_1_fu_326_grp_fu_1002_p_ce;
        else 
            grp_fu_1002_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1002_p0_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_1002_p_din0, grp_convolution2_fu_344_grp_fu_1002_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_1002_p0 <= grp_convolution2_fu_344_grp_fu_1002_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_1002_p0 <= grp_convolution1_1_fu_326_grp_fu_1002_p_din0;
        else 
            grp_fu_1002_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1002_p1_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_1002_p_din1, grp_convolution2_fu_344_grp_fu_1002_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_1002_p1 <= grp_convolution2_fu_344_grp_fu_1002_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_1002_p1 <= grp_convolution1_1_fu_326_grp_fu_1002_p_din1;
        else 
            grp_fu_1002_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1006_ce_assign_proc : process(ap_CS_fsm_state30, grp_maxPool_1_fu_338_grp_fu_1006_p_ce, grp_maxPool_fu_354_grp_fu_1006_p_ce, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1006_ce <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_1006_ce <= grp_maxPool_fu_354_grp_fu_1006_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_1006_ce <= grp_maxPool_1_fu_338_grp_fu_1006_p_ce;
        else 
            grp_fu_1006_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1006_p0_assign_proc : process(ap_CS_fsm_state30, grp_maxPool_1_fu_338_grp_fu_1006_p_din0, grp_maxPool_fu_354_grp_fu_1006_p_din0, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1006_p0 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1006_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_1006_p0 <= grp_maxPool_fu_354_grp_fu_1006_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_1006_p0 <= grp_maxPool_1_fu_338_grp_fu_1006_p_din0;
        else 
            grp_fu_1006_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1009_ce_assign_proc : process(ap_CS_fsm_state30, grp_maxPool_1_fu_338_grp_fu_1009_p_ce, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1009_ce <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_1009_ce <= grp_maxPool_1_fu_338_grp_fu_1009_p_ce;
        else 
            grp_fu_1009_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1009_p0_assign_proc : process(ap_CS_fsm_state30, grp_maxPool_1_fu_338_grp_fu_1009_p_din0, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_1009_p0 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_1009_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_1009_p0 <= grp_maxPool_1_fu_338_grp_fu_1009_p_din0;
        else 
            grp_fu_1009_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_371_ce_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_371_p_ce, grp_convolution2_fu_344_grp_fu_371_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_371_ce <= grp_convolution2_fu_344_grp_fu_371_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_371_ce <= grp_convolution1_1_fu_326_grp_fu_371_p_ce;
        else 
            grp_fu_371_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_371_p0_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_371_p_din0, grp_convolution2_fu_344_grp_fu_371_p_din0, add11_i_reg_293, den2_0_0_reg_316, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_371_p0 <= grp_convolution2_fu_344_grp_fu_371_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_371_p0 <= grp_convolution1_1_fu_326_grp_fu_371_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_371_p0 <= den2_0_0_reg_316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_371_p0 <= add11_i_reg_293;
        else 
            grp_fu_371_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_371_p1_assign_proc : process(ap_CS_fsm_state1, reg_424, grp_convolution1_1_fu_326_grp_fu_371_p_din1, grp_convolution2_fu_344_grp_fu_371_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_371_p1 <= grp_convolution2_fu_344_grp_fu_371_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_371_p1 <= grp_convolution1_1_fu_326_grp_fu_371_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_371_p1 <= reg_424;
        else 
            grp_fu_371_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_ce_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_377_p_ce, grp_convolution2_fu_344_grp_fu_377_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_377_ce <= grp_convolution2_fu_344_grp_fu_377_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_377_ce <= grp_convolution1_1_fu_326_grp_fu_377_p_ce;
        else 
            grp_fu_377_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_377_p0_assign_proc : process(ap_CS_fsm_state1, max2_0_q0, ap_CS_fsm_state13, den1_0_q0, ap_CS_fsm_state23, grp_convolution1_1_fu_326_grp_fu_377_p_din0, grp_convolution2_fu_344_grp_fu_377_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_377_p0 <= grp_convolution2_fu_344_grp_fu_377_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_377_p0 <= grp_convolution1_1_fu_326_grp_fu_377_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_377_p0 <= den1_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_377_p0 <= max2_0_q0;
        else 
            grp_fu_377_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_377_p1_assign_proc : process(ap_CS_fsm_state1, firstDense_q0, secondDense_q0, ap_CS_fsm_state13, ap_CS_fsm_state23, grp_convolution1_1_fu_326_grp_fu_377_p_din1, grp_convolution2_fu_344_grp_fu_377_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_377_p1 <= grp_convolution2_fu_344_grp_fu_377_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_377_p1 <= grp_convolution1_1_fu_326_grp_fu_377_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_377_p1 <= secondDense_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_377_p1 <= firstDense_q0;
        else 
            grp_fu_377_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_385_ce_assign_proc : process(grp_maxPool_1_fu_338_grp_fu_385_p_ce, grp_maxPool_fu_354_grp_fu_385_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_385_ce <= grp_maxPool_fu_354_grp_fu_385_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_385_ce <= grp_maxPool_1_fu_338_grp_fu_385_p_ce;
        else 
            grp_fu_385_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_385_p0_assign_proc : process(ap_CS_fsm_state30, tmp_4_fu_757_p6, grp_maxPool_1_fu_338_grp_fu_385_p_din0, grp_maxPool_fu_354_grp_fu_385_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_385_p0 <= grp_maxPool_fu_354_grp_fu_385_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_385_p0 <= grp_maxPool_1_fu_338_grp_fu_385_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_385_p0 <= tmp_4_fu_757_p6;
        else 
            grp_fu_385_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_388_ce_assign_proc : process(ap_CS_fsm_state1, grp_convolution1_1_fu_326_grp_fu_388_p_ce, grp_convolution2_fu_344_grp_fu_388_p_ce, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_388_ce <= grp_convolution2_fu_344_grp_fu_388_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_388_ce <= grp_convolution1_1_fu_326_grp_fu_388_p_ce;
        else 
            grp_fu_388_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_388_opcode_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state11, icmp_ln106_fu_500_p2, grp_convolution1_1_fu_326_grp_fu_388_p_opcode, grp_convolution2_fu_344_grp_fu_388_p_opcode, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_388_opcode <= grp_convolution2_fu_344_grp_fu_388_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_388_opcode <= grp_convolution1_1_fu_326_grp_fu_388_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln106_fu_500_p2 = ap_const_lv1_1))) then 
            grp_fu_388_opcode <= ap_const_lv5_4;
        else 
            grp_fu_388_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_388_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state11, grp_convolution1_1_fu_326_grp_fu_388_p_din0, grp_convolution2_fu_344_grp_fu_388_p_din0, add_lcssa_lcssa14_i_reg_272, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_388_p0 <= grp_convolution2_fu_344_grp_fu_388_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_388_p0 <= grp_convolution1_1_fu_326_grp_fu_388_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_388_p0 <= add_lcssa_lcssa14_i_reg_272;
        else 
            grp_fu_388_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_388_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state11, grp_convolution1_1_fu_326_grp_fu_388_p_din1, grp_convolution2_fu_344_grp_fu_388_p_din1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_388_p1 <= grp_convolution2_fu_344_grp_fu_388_p_din1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_388_p1 <= grp_convolution1_1_fu_326_grp_fu_388_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_388_p1 <= ap_const_lv32_0;
        else 
            grp_fu_388_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_398_ce_assign_proc : process(ap_CS_fsm_state30, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_ce, ap_CS_fsm_state48)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_398_ce <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_ce;
        else 
            grp_fu_398_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_398_p1_assign_proc : process(ap_CS_fsm_state30, conv_i_reg_992, grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din1, ap_CS_fsm_state48, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_398_p1 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_grp_fu_398_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_398_p1 <= conv_i_reg_992;
        else 
            grp_fu_398_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_ap_start_reg;
    grp_maxPool_1_fu_338_ap_start <= grp_maxPool_1_fu_338_ap_start_reg;
    grp_maxPool_fu_354_ap_start <= grp_maxPool_fu_354_ap_start_reg;
    icmp_ln103_fu_455_p2 <= "1" when (d_fu_140 = ap_const_lv5_10) else "0";
    icmp_ln106_fu_500_p2 <= "1" when (i_reg_261 = ap_const_lv4_E) else "0";
    icmp_ln110_fu_532_p2 <= "1" when (h_reg_282 = ap_const_lv5_10) else "0";
    icmp_ln116_1_fu_605_p2 <= "1" when (trunc_ln116_fu_595_p1 = ap_const_lv23_0) else "0";
    icmp_ln116_fu_599_p2 <= "0" when (tmp_1_fu_585_p4 = ap_const_lv8_FF) else "1";
    icmp_ln124_fu_635_p2 <= "1" when (d_1_fu_164 = ap_const_lv3_4) else "0";
    icmp_ln127_fu_692_p2 <= "1" when (i_2_reg_305 = ap_const_lv5_10) else "0";
    icmp_ln138_fu_741_p2 <= "1" when (i_1_fu_188 = ap_const_lv3_4) else "0";
    input_r_address0 <= grp_convolution1_1_fu_326_input_r_address0;
    input_r_address1 <= grp_convolution1_1_fu_326_input_r_address1;
    input_r_ce0 <= grp_convolution1_1_fu_326_input_r_ce0;
    input_r_ce1 <= grp_convolution1_1_fu_326_input_r_ce1;

    max1_0_address0_assign_proc : process(grp_maxPool_1_fu_338_out_0_address0, grp_convolution2_fu_344_m_0_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max1_0_address0 <= grp_convolution2_fu_344_m_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max1_0_address0 <= grp_maxPool_1_fu_338_out_0_address0;
        else 
            max1_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max1_0_ce0_assign_proc : process(grp_maxPool_1_fu_338_out_0_ce0, grp_convolution2_fu_344_m_0_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max1_0_ce0 <= grp_convolution2_fu_344_m_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max1_0_ce0 <= grp_maxPool_1_fu_338_out_0_ce0;
        else 
            max1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max1_0_ce1_assign_proc : process(grp_convolution2_fu_344_m_0_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            max1_0_ce1 <= grp_convolution2_fu_344_m_0_ce1;
        else 
            max1_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max1_0_we0_assign_proc : process(grp_maxPool_1_fu_338_out_0_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max1_0_we0 <= grp_maxPool_1_fu_338_out_0_we0;
        else 
            max1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max2_0_address0_assign_proc : process(ap_CS_fsm_state12, grp_maxPool_fu_354_out_0_address0, ap_CS_fsm_state8, zext_ln112_fu_549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max2_0_address0 <= zext_ln112_fu_549_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max2_0_address0 <= grp_maxPool_fu_354_out_0_address0;
        else 
            max2_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max2_0_ce0_assign_proc : process(ap_CS_fsm_state12, grp_maxPool_fu_354_out_0_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            max2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max2_0_ce0 <= grp_maxPool_fu_354_out_0_ce0;
        else 
            max2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max2_0_we0_assign_proc : process(grp_maxPool_fu_354_out_0_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max2_0_we0 <= grp_maxPool_fu_354_out_0_we0;
        else 
            max2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln116_fu_611_p2 <= (icmp_ln116_fu_599_p2 or icmp_ln116_1_fu_605_p2);
    out_r_address0 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_address0;
    out_r_ce0 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_ce0;
    out_r_d0 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_d0;
    out_r_we0 <= grp_master_Pipeline_VITIS_LOOP_143_2_fu_360_out_r_we0;
    p_shl1_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_483_p3),12));
    p_shl1_fu_483_p3 <= (empty_40_reg_807 & ap_const_lv5_0);
    p_shl_fu_476_p3 <= (empty_40_reg_807 & ap_const_lv8_0);
    secondDense_address0 <= zext_ln128_2_fu_709_p1(6 - 1 downto 0);

    secondDense_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            secondDense_ce0 <= ap_const_logic_1;
        else 
            secondDense_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    thirdBias_address0 <= zext_ln103_fu_449_p1(4 - 1 downto 0);

    thirdBias_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            thirdBias_ce0 <= ap_const_logic_1;
        else 
            thirdBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp5_fu_563_p3 <= (tmp_5_fu_554_p4 & h_reg_282);
    tmp_1_fu_585_p4 <= bitcast_ln116_fu_581_p1(30 downto 23);
    tmp_2_fu_665_p3 <= (trunc_ln126_fu_647_p1 & ap_const_lv4_0);
    tmp_4_fu_757_p5 <= i_1_fu_188(2 - 1 downto 0);
    tmp_5_fu_554_p4 <= empty_41_reg_849(11 downto 5);
    tmp_6_fu_512_p3 <= (i_reg_261 & ap_const_lv4_0);
    trunc_ln116_fu_595_p1 <= bitcast_ln116_fu_581_p1(23 - 1 downto 0);
    trunc_ln126_fu_647_p1 <= d_1_fu_164(2 - 1 downto 0);
    zext_ln103_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_140),64));
    zext_ln110_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_282),8));
    zext_ln110_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_512_p3),12));
    zext_ln112_1_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_1_fu_571_p2),64));
    zext_ln112_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_fu_544_p2),64));
    zext_ln128_1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_305),6));
    zext_ln128_2_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln128_fu_704_p2),64));
    zext_ln128_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_305),64));
end behav;
