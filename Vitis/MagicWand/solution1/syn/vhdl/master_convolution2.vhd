-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_convolution2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_0_ce0 : OUT STD_LOGIC;
    m_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_0_ce1 : OUT STD_LOGIC;
    m_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_371_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_371_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_371_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_371_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_371_p_ce : OUT STD_LOGIC;
    grp_fu_377_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_377_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_377_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_377_p_ce : OUT STD_LOGIC;
    grp_fu_1002_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1002_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1002_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1002_p_ce : OUT STD_LOGIC;
    grp_fu_388_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_388_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_388_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_388_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_388_p_ce : OUT STD_LOGIC );
end;


architecture behav of master_convolution2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (41 downto 0) := "000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (41 downto 0) := "000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (41 downto 0) := "000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (41 downto 0) := "000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (41 downto 0) := "000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (41 downto 0) := "000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (41 downto 0) := "000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (41 downto 0) := "000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (41 downto 0) := "000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (41 downto 0) := "000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (41 downto 0) := "001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (41 downto 0) := "010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (41 downto 0) := "100000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_18 : STD_LOGIC_VECTOR (8 downto 0) := "000011000";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (41 downto 0) := "000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal secondBias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal secondBias_ce0 : STD_LOGIC;
    signal secondBias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal secondKernel_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal secondKernel_ce0 : STD_LOGIC;
    signal secondKernel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal secondKernel_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal secondKernel_ce1 : STD_LOGIC;
    signal secondKernel_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal reg_399 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln46_1_fu_418_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_1_reg_770 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln46_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln46_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln46_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_47_fu_434_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_47_reg_788 : STD_LOGIC_VECTOR (3 downto 0);
    signal arrayidx17_sum1_fu_445_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx17_sum1_reg_794 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal arrayidx61_sum2_fu_451_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx61_sum2_reg_799 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx74_sum3_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx74_sum3_reg_804 : STD_LOGIC_VECTOR (8 downto 0);
    signal secondBias_load_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next63_fu_469_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_next63_reg_817 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_12_fu_483_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_reg_824 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond669_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_0_addr_reg_830 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_fu_515_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln54_reg_838 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln54_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp27_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp27_reg_853 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp51_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp51_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp89_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp89_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_564_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_reg_865 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_571_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_reg_871 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln59_fu_585_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln59_reg_884 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln59_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln68_fu_635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln68_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln68_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln64_fu_674_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln64_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal icmp_ln64_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul3_reg_965 : STD_LOGIC_VECTOR (31 downto 0);
    signal add2_reg_970 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln73_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_980 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln73_1_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_220 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal h_reg_232 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_49_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_reg_254 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_52_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayidx8524_promoted_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_3_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_56_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_2_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_54_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_58_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln46_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_1_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_1_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_1_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_1_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_2_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_3_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln73_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_350_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_358_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_438_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_475_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln53_fu_491_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln54_fu_505_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_fu_521_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln55_1_fu_531_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_51_fu_541_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln60_fu_591_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln60_fu_597_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln60_fu_601_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln60_1_fu_611_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln68_fu_625_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln69_fu_641_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_378_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln69_1_fu_651_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln64_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_fu_680_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_1_fu_690_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_2_fu_703_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln65_3_fu_713_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln73_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_727_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln73_fu_737_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln73_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component master_convolution2_secondBias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_convolution2_secondKernel IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    secondBias_U : component master_convolution2_secondBias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondBias_address0,
        ce0 => secondBias_ce0,
        q0 => secondBias_q0);

    secondKernel_U : component master_convolution2_secondKernel
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondKernel_address0,
        ce0 => secondKernel_ce0,
        q0 => secondKernel_q0,
        address1 => secondKernel_address1,
        ce1 => secondKernel_ce1,
        q1 => secondKernel_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    arrayidx8524_promoted_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp27_fu_547_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_509_p2 = ap_const_lv1_1))) then 
                arrayidx8524_promoted_reg_277 <= empty_49_reg_243;
            elsif (((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp27_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                arrayidx8524_promoted_reg_277 <= empty_52_reg_265;
            end if; 
        end if;
    end process;

    d_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_92 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond669_fu_463_p2 = ap_const_lv1_1))) then 
                d_fu_92 <= add_ln46_reg_778;
            end if; 
        end if;
    end process;

    empty_49_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond669_fu_463_p2 = ap_const_lv1_0))) then 
                empty_49_reg_243 <= secondBias_load_reg_809;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                empty_49_reg_243 <= grp_fu_371_p_dout0;
            end if; 
        end if;
    end process;

    empty_52_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp27_fu_547_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_509_p2 = ap_const_lv1_1))) then 
                empty_52_reg_265 <= empty_49_reg_243;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                empty_52_reg_265 <= grp_fu_371_p_dout0;
            end if; 
        end if;
    end process;

    empty_54_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp51_reg_857 = ap_const_lv1_1) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_1))))) then 
                empty_54_reg_323 <= ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                empty_54_reg_323 <= grp_fu_371_p_dout0;
            end if; 
        end if;
    end process;

    empty_56_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp89_reg_861 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_0) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp89_reg_861 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_0))))) then 
                empty_56_reg_300 <= ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                empty_56_reg_300 <= grp_fu_371_p_dout0;
            end if; 
        end if;
    end process;

    empty_58_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp89_reg_861 = ap_const_lv1_0) and (cmp51_reg_857 = ap_const_lv1_0) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp89_reg_861 = ap_const_lv1_0) and (cmp51_reg_857 = ap_const_lv1_0))))) then 
                empty_58_reg_335 <= ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
            elsif (((icmp_ln68_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                empty_58_reg_335 <= empty_56_reg_300;
            elsif (((icmp_ln64_fu_668_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                empty_58_reg_335 <= empty_54_reg_323;
            end if; 
        end if;
    end process;

    h_1_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp27_fu_547_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_509_p2 = ap_const_lv1_1))) then 
                h_1_reg_254 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                h_1_reg_254 <= add_ln59_reg_884;
            end if; 
        end if;
    end process;

    h_2_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp51_reg_857 = ap_const_lv1_1) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_1))))) then 
                h_2_reg_312 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                h_2_reg_312 <= add_ln64_reg_930;
            end if; 
        end if;
    end process;

    h_3_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp89_reg_861 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_0) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp89_reg_861 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_0))))) then 
                h_3_reg_289 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                h_3_reg_289 <= add_ln68_reg_907;
            end if; 
        end if;
    end process;

    h_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond669_fu_463_p2 = ap_const_lv1_0))) then 
                h_reg_232 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                h_reg_232 <= add_ln54_reg_838;
            end if; 
        end if;
    end process;

    i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_220 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_reg_220 <= indvars_iv_next63_reg_817;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add2_reg_970 <= grp_fu_371_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln46_reg_778 <= add_ln46_fu_428_p2;
                    zext_ln46_1_reg_770(4 downto 0) <= zext_ln46_1_fu_418_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln54_reg_838 <= add_ln54_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp27_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                add_ln59_reg_884 <= add_ln59_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln64_reg_930 <= add_ln64_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln68_reg_907 <= add_ln68_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    arrayidx17_sum1_reg_794(8 downto 5) <= arrayidx17_sum1_fu_445_p2(8 downto 5);
                    arrayidx61_sum2_reg_799(8 downto 5) <= arrayidx61_sum2_fu_451_p2(8 downto 5);
                    arrayidx74_sum3_reg_804(8 downto 5) <= arrayidx74_sum3_fu_457_p2(8 downto 5);
                secondBias_load_reg_809 <= secondBias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_509_p2 = ap_const_lv1_1))) then
                cmp27_reg_853 <= cmp27_fu_547_p2;
                cmp51_reg_857 <= cmp51_fu_553_p2;
                cmp89_reg_861 <= cmp89_fu_559_p2;
                    tmp_13_reg_865(8 downto 3) <= tmp_13_fu_564_p3(8 downto 3);
                    tmp_14_reg_871(8 downto 3) <= tmp_14_fu_571_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_422_p2 = ap_const_lv1_0))) then
                empty_47_reg_788 <= empty_47_fu_434_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                icmp_ln73_1_reg_985 <= icmp_ln73_1_fu_747_p2;
                icmp_ln73_reg_980 <= icmp_ln73_fu_741_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                indvars_iv_next63_reg_817 <= indvars_iv_next63_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                mul3_reg_965 <= grp_fu_1002_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond669_fu_463_p2 = ap_const_lv1_0))) then
                out_0_addr_reg_830 <= zext_ln53_fu_496_p1(10 - 1 downto 0);
                    tmp_12_reg_824(8 downto 3) <= tmp_12_fu_483_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_399 <= grp_fu_377_p_dout0;
            end if;
        end if;
    end process;
    zext_ln46_1_reg_770(9 downto 5) <= "00000";
    arrayidx17_sum1_reg_794(4 downto 0) <= "01000";
    arrayidx61_sum2_reg_799(4 downto 0) <= "10000";
    arrayidx74_sum3_reg_804(4 downto 0) <= "11000";
    tmp_12_reg_824(2 downto 0) <= "000";
    tmp_13_reg_865(2 downto 0) <= "000";
    tmp_14_reg_871(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_422_p2, ap_CS_fsm_state4, exitcond669_fu_463_p2, ap_CS_fsm_state5, icmp_ln54_fu_509_p2, cmp27_reg_853, cmp51_reg_857, cmp89_reg_861, ap_CS_fsm_state13, icmp_ln59_fu_579_p2, ap_CS_fsm_state21, icmp_ln68_fu_629_p2, ap_CS_fsm_state29, icmp_ln64_fu_668_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_422_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond669_fu_463_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_509_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp51_reg_857 = ap_const_lv1_1) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp89_reg_861 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_0) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp89_reg_861 = ap_const_lv1_1) and (cmp51_reg_857 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (((cmp89_reg_861 = ap_const_lv1_0) and (cmp51_reg_857 = ap_const_lv1_0) and (cmp27_reg_853 = ap_const_lv1_1)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp89_reg_861 = ap_const_lv1_0) and (cmp51_reg_857 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln68_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln64_fu_668_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln46_fu_428_p2 <= std_logic_vector(unsigned(d_fu_92) + unsigned(ap_const_lv5_1));
    add_ln53_fu_491_p2 <= std_logic_vector(unsigned(tmp_11_fu_475_p3) + unsigned(zext_ln46_1_reg_770));
    add_ln54_fu_515_p2 <= std_logic_vector(unsigned(h_reg_232) + unsigned(ap_const_lv4_1));
    add_ln55_1_fu_531_p2 <= std_logic_vector(unsigned(zext_ln54_fu_505_p1) + unsigned(arrayidx17_sum1_reg_794));
    add_ln55_fu_521_p2 <= std_logic_vector(unsigned(zext_ln54_fu_505_p1) + unsigned(tmp_12_reg_824));
    add_ln59_fu_585_p2 <= std_logic_vector(unsigned(h_1_reg_254) + unsigned(ap_const_lv4_1));
    add_ln60_1_fu_611_p4 <= ((empty_47_reg_788 & ap_const_lv1_0) & h_1_reg_254);
    add_ln60_fu_601_p2 <= std_logic_vector(signed(sext_ln60_fu_597_p1) + signed(tmp_12_reg_824));
    add_ln64_fu_674_p2 <= std_logic_vector(unsigned(h_2_reg_312) + unsigned(ap_const_lv4_1));
    add_ln65_1_fu_690_p3 <= (grp_fu_378_p4 & h_2_reg_312);
    add_ln65_2_fu_703_p2 <= std_logic_vector(unsigned(zext_ln64_fu_664_p1) + unsigned(tmp_14_reg_871));
    add_ln65_3_fu_713_p2 <= std_logic_vector(unsigned(zext_ln64_fu_664_p1) + unsigned(arrayidx74_sum3_reg_804));
    add_ln65_fu_680_p2 <= std_logic_vector(unsigned(zext_ln64_fu_664_p1) + unsigned(tmp_13_reg_865));
    add_ln68_fu_635_p2 <= std_logic_vector(unsigned(h_3_reg_289) + unsigned(ap_const_lv4_1));
    add_ln69_1_fu_651_p3 <= (grp_fu_378_p4 & h_3_reg_289);
    add_ln69_fu_641_p2 <= std_logic_vector(unsigned(zext_ln68_fu_625_p1) + unsigned(tmp_13_reg_865));
    and_ln73_fu_757_p2 <= (or_ln73_fu_753_p2 and grp_fu_388_p_dout0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln46_fu_422_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_422_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4_assign_proc : process(cmp27_reg_853, ap_CS_fsm_state13, icmp_ln59_fu_579_p2, empty_52_reg_265, arrayidx8524_promoted_reg_277)
    begin
        if (((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp27_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4 <= empty_52_reg_265;
        else 
            ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4 <= arrayidx8524_promoted_reg_277;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln46_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln46_fu_422_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx17_sum1_fu_445_p2 <= (tmp_10_fu_438_p3 or ap_const_lv9_8);
    arrayidx61_sum2_fu_451_p2 <= (tmp_10_fu_438_p3 or ap_const_lv9_10);
    arrayidx74_sum3_fu_457_p2 <= (tmp_10_fu_438_p3 or ap_const_lv9_18);
    bitcast_ln73_fu_723_p1 <= empty_58_reg_335;
    cmp27_fu_547_p2 <= "1" when (i_reg_220 = ap_const_lv6_0) else "0";
    cmp51_fu_553_p2 <= "1" when (unsigned(empty_51_fu_541_p2) < unsigned(ap_const_lv6_2A)) else "0";
    cmp89_fu_559_p2 <= "1" when (unsigned(indvars_iv_next63_reg_817) < unsigned(ap_const_lv6_2A)) else "0";
    empty_47_fu_434_p1 <= d_fu_92(4 - 1 downto 0);
    empty_51_fu_541_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(ap_const_lv6_2));
    exitcond669_fu_463_p2 <= "1" when (i_reg_220 = ap_const_lv6_2A) else "0";
    grp_fu_1002_p_ce <= ap_const_logic_1;
    grp_fu_1002_p_din0 <= m_0_q0;
    grp_fu_1002_p_din1 <= secondKernel_q0;

    grp_fu_350_p0_assign_proc : process(reg_399, empty_49_reg_243, empty_52_reg_265, empty_56_reg_300, empty_54_reg_323, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state25, ap_CS_fsm_state33, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_350_p0 <= empty_54_reg_323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_350_p0 <= reg_399;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_350_p0 <= empty_56_reg_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_350_p0 <= empty_52_reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_350_p0 <= empty_49_reg_243;
        else 
            grp_fu_350_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_350_p1_assign_proc : process(reg_399, mul3_reg_965, add2_reg_970, ap_CS_fsm_state9, ap_CS_fsm_state17, ap_CS_fsm_state25, ap_CS_fsm_state33, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_350_p1 <= add2_reg_970;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_350_p1 <= mul3_reg_965;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_350_p1 <= reg_399;
        else 
            grp_fu_350_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_358_p0_assign_proc : process(m_0_q0, m_0_q1, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_358_p0 <= m_0_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_358_p0 <= m_0_q0;
        else 
            grp_fu_358_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_358_p1_assign_proc : process(secondKernel_q0, secondKernel_q1, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_358_p1 <= secondKernel_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_358_p1 <= secondKernel_q0;
        else 
            grp_fu_358_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_371_p_ce <= ap_const_logic_1;
    grp_fu_371_p_din0 <= grp_fu_350_p0;
    grp_fu_371_p_din1 <= grp_fu_350_p1;
    grp_fu_371_p_opcode <= ap_const_lv2_0;
    grp_fu_377_p_ce <= ap_const_logic_1;
    grp_fu_377_p_din0 <= grp_fu_358_p0;
    grp_fu_377_p_din1 <= grp_fu_358_p1;
    grp_fu_378_p4 <= arrayidx61_sum2_reg_799(8 downto 4);
    grp_fu_388_p_ce <= ap_const_logic_1;
    grp_fu_388_p_din0 <= empty_58_reg_335;
    grp_fu_388_p_din1 <= ap_const_lv32_0;
    grp_fu_388_p_opcode <= ap_const_lv5_4;
    icmp_ln46_fu_422_p2 <= "1" when (d_fu_92 = ap_const_lv5_10) else "0";
    icmp_ln54_fu_509_p2 <= "1" when (h_reg_232 = ap_const_lv4_8) else "0";
    icmp_ln59_fu_579_p2 <= "1" when (h_1_reg_254 = ap_const_lv4_8) else "0";
    icmp_ln64_fu_668_p2 <= "1" when (h_2_reg_312 = ap_const_lv4_8) else "0";
    icmp_ln68_fu_629_p2 <= "1" when (h_3_reg_289 = ap_const_lv4_8) else "0";
    icmp_ln73_1_fu_747_p2 <= "1" when (trunc_ln73_fu_737_p1 = ap_const_lv23_0) else "0";
    icmp_ln73_fu_741_p2 <= "0" when (tmp_8_fu_727_p4 = ap_const_lv8_FF) else "1";
    indvars_iv_next63_fu_469_p2 <= std_logic_vector(unsigned(i_reg_220) + unsigned(ap_const_lv6_1));

    m_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state29, zext_ln55_fu_526_p1, zext_ln60_fu_606_p1, zext_ln69_fu_646_p1, zext_ln65_2_fu_708_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            m_0_address0 <= zext_ln65_2_fu_708_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            m_0_address0 <= zext_ln69_fu_646_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_0_address0 <= zext_ln60_fu_606_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_0_address0 <= zext_ln55_fu_526_p1(9 - 1 downto 0);
        else 
            m_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    m_0_address1 <= zext_ln65_fu_685_p1(9 - 1 downto 0);

    m_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_0_ce0 <= ap_const_logic_1;
        else 
            m_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_0_ce1_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            m_0_ce1 <= ap_const_logic_1;
        else 
            m_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln73_fu_753_p2 <= (icmp_ln73_reg_980 or icmp_ln73_1_reg_985);
    out_0_address0 <= out_0_addr_reg_830;

    out_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state42, empty_49_reg_243, empty_52_reg_265, empty_56_reg_300, empty_54_reg_323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            out_0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            out_0_d0 <= empty_54_reg_323;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            out_0_d0 <= empty_56_reg_300;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_0_d0 <= empty_52_reg_265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_0_d0 <= empty_49_reg_243;
        else 
            out_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_0_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln54_fu_509_p2, cmp27_reg_853, ap_CS_fsm_state13, icmp_ln59_fu_579_p2, ap_CS_fsm_state21, icmp_ln68_fu_629_p2, ap_CS_fsm_state29, icmp_ln64_fu_668_p2, ap_CS_fsm_state42, and_ln73_fu_757_p2)
    begin
        if ((((ap_const_lv1_1 = and_ln73_fu_757_p2) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((icmp_ln68_fu_629_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((icmp_ln64_fu_668_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln59_fu_579_p2 = ap_const_lv1_1) and (cmp27_reg_853 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln54_fu_509_p2 = ap_const_lv1_1)))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    secondBias_address0 <= zext_ln46_fu_413_p1(4 - 1 downto 0);

    secondBias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secondBias_ce0 <= ap_const_logic_1;
        else 
            secondBias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secondKernel_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state29, zext_ln55_1_fu_536_p1, zext_ln60_1_fu_620_p1, zext_ln69_1_fu_659_p1, zext_ln65_3_fu_718_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            secondKernel_address0 <= zext_ln65_3_fu_718_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            secondKernel_address0 <= zext_ln69_1_fu_659_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            secondKernel_address0 <= zext_ln60_1_fu_620_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secondKernel_address0 <= zext_ln55_1_fu_536_p1(9 - 1 downto 0);
        else 
            secondKernel_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    secondKernel_address1 <= zext_ln65_1_fu_698_p1(9 - 1 downto 0);

    secondKernel_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            secondKernel_ce0 <= ap_const_logic_1;
        else 
            secondKernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secondKernel_ce1_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            secondKernel_ce1 <= ap_const_logic_1;
        else 
            secondKernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln60_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln60_fu_591_p2),9));

    tmp_10_fu_438_p3 <= (empty_47_reg_788 & ap_const_lv5_0);
    tmp_11_fu_475_p3 <= (i_reg_220 & ap_const_lv4_0);
    tmp_12_fu_483_p3 <= (i_reg_220 & ap_const_lv3_0);
    tmp_13_fu_564_p3 <= (indvars_iv_next63_reg_817 & ap_const_lv3_0);
    tmp_14_fu_571_p3 <= (empty_51_fu_541_p2 & ap_const_lv3_0);
    tmp_8_fu_727_p4 <= bitcast_ln73_fu_723_p1(30 downto 23);
    trunc_ln73_fu_737_p1 <= bitcast_ln73_fu_723_p1(23 - 1 downto 0);
    xor_ln60_fu_591_p2 <= (h_1_reg_254 xor ap_const_lv4_8);
    zext_ln46_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_92),10));
    zext_ln46_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_92),64));
    zext_ln53_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_fu_491_p2),64));
    zext_ln54_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_232),9));
    zext_ln55_1_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_1_fu_531_p2),64));
    zext_ln55_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln55_fu_521_p2),64));
    zext_ln60_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_1_fu_611_p4),64));
    zext_ln60_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_fu_601_p2),64));
    zext_ln64_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_2_reg_312),9));
    zext_ln65_1_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_1_fu_690_p3),64));
    zext_ln65_2_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_2_fu_703_p2),64));
    zext_ln65_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_3_fu_713_p2),64));
    zext_ln65_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_fu_680_p2),64));
    zext_ln68_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_3_reg_289),9));
    zext_ln69_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_1_fu_651_p3),64));
    zext_ln69_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_641_p2),64));
end behav;
