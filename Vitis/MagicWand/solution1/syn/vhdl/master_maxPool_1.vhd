-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_maxPool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1006_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1006_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1006_p_ce : OUT STD_LOGIC;
    grp_fu_385_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_385_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_385_p_ce : OUT STD_LOGIC;
    grp_fu_1009_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1009_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1009_p_ce : OUT STD_LOGIC );
end;


architecture behav of master_maxPool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln83_fu_181_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln83_reg_669 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln83_1_fu_185_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_1_reg_674 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln83_fu_195_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln83_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln85_fu_201_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln85_reg_687 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln85_fu_213_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln85_reg_695 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_35_fu_219_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_35_reg_700 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_205_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal arrayidx121_sum_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal arrayidx121_sum_reg_709 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln87_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_0_addr_reg_717 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal empty_36_fu_303_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_36_reg_722 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln91_fu_314_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln91_reg_735 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln91_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal p_Result_s_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal dc_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal dc_1_reg_770 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_5_fu_654_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal i_reg_129 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln83_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv2221_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayidx121_sum_cast_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_98 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln88_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal mul_fu_231_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_231_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast1_cast_fu_223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln87_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_249_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_231_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_255_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_265_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln88_fu_282_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_fu_296_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_cast_fu_320_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_324_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_329_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln93_fu_337_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln483_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln483_2_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_374_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_384_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_1_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_391_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_401_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_5_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_3_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_483_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_3_fu_493_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln368_fu_506_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_1_fu_517_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_4_fu_510_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_521_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ymaggreater_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_540_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_1_fu_547_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_4_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1007_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_2_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_1_fu_554_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln25_3_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_4_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_2_fu_572_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln18_3_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_4_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_3_fu_592_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln18_1_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_2_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_5_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_4_fu_617_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_249_ap_start : STD_LOGIC;
    signal grp_fu_249_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal mul_fu_231_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component master_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component master_urem_7ns_3ns_2_11_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    mul_7ns_9ns_15_1_1_U15 : component master_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_fu_231_p0,
        din1 => mul_fu_231_p1,
        dout => mul_fu_231_p2);

    urem_7ns_3ns_2_11_seq_1_U16 : component master_urem_7ns_3ns_2_11_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_249_ap_start,
        done => grp_fu_249_ap_done,
        din0 => empty_35_fu_219_p1,
        din1 => grp_fu_249_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_249_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    conv2221_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                conv2221_reg_151 <= out_0_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                conv2221_reg_151 <= grp_fu_1006_p_dout0;
            end if; 
        end if;
    end process;

    d_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_98 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln87_fu_243_p2 = ap_const_lv1_1) or (tmp_3_fu_205_p3 = ap_const_lv1_1)))) then 
                d_fu_98 <= add_ln83_reg_682;
            end if; 
        end if;
    end process;

    i_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_189_p2 = ap_const_lv1_0))) then 
                i_reg_129 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln91_fu_308_p2 = ap_const_lv1_1))) then 
                i_reg_129 <= add_ln85_reg_695;
            end if; 
        end if;
    end process;

    j_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_reg_140 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                j_reg_140 <= add_ln91_reg_735;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln83_reg_682 <= add_ln83_fu_195_p2;
                    zext_ln83_1_reg_674(3 downto 0) <= zext_ln83_1_fu_185_p1(3 downto 0);
                    zext_ln83_reg_669(3 downto 0) <= zext_ln83_fu_181_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln85_reg_695 <= add_ln85_fu_213_p2;
                    zext_ln85_reg_687(7 downto 0) <= zext_ln85_fu_201_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln91_reg_735 <= add_ln91_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_243_p2 = ap_const_lv1_0) and (tmp_3_fu_205_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                arrayidx121_sum_reg_709 <= arrayidx121_sum_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                dc_1_reg_770 <= grp_fu_1009_p_dout0;
                dc_reg_763 <= grp_fu_385_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_205_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                empty_35_reg_700 <= empty_35_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                empty_36_reg_722 <= empty_36_fu_303_p2;
                out_0_addr_reg_717 <= arrayidx121_sum_cast_fu_292_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_Result_1_reg_757 <= bitcast_ln483_2_fu_359_p1(31 downto 31);
                p_Result_s_reg_750 <= bitcast_ln483_fu_347_p1(31 downto 31);
            end if;
        end if;
    end process;
    zext_ln83_reg_669(11 downto 4) <= "00000000";
    zext_ln83_1_reg_674(8 downto 4) <= "00000";
    zext_ln85_reg_687(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_3_fu_205_p3, icmp_ln87_fu_243_p2, ap_CS_fsm_state16, icmp_ln91_fu_308_p2, icmp_ln83_fu_189_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_189_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((icmp_ln87_fu_243_p2 = ap_const_lv1_1) or (tmp_3_fu_205_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln91_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln83_fu_195_p2 <= std_logic_vector(unsigned(d_fu_98) + unsigned(ap_const_lv4_1));
    add_ln85_fu_213_p2 <= std_logic_vector(unsigned(i_reg_129) + unsigned(ap_const_lv8_1));
    add_ln87_fu_237_p2 <= std_logic_vector(unsigned(i_cast1_cast_fu_223_p1) + unsigned(ap_const_lv8_82));
    add_ln91_fu_314_p2 <= std_logic_vector(unsigned(j_reg_140) + unsigned(ap_const_lv2_1));
    add_ln93_fu_337_p2 <= std_logic_vector(unsigned(tmp2_fu_329_p3) + unsigned(zext_ln83_reg_669));
    and_ln18_1_fu_560_p2 <= (xor_ln1007_fu_441_p2 and icmp_ln1003_4_fu_435_p2);
    and_ln18_2_fu_566_p2 <= (and_ln18_fu_459_p2 and and_ln18_1_fu_560_p2);
    and_ln18_3_fu_599_p2 <= (icmp_ln1007_fu_453_p2 and icmp_ln1003_5_fu_447_p2);
    and_ln18_4_fu_611_p2 <= (xor_ln18_fu_605_p2 and and_ln18_1_fu_560_p2);
    and_ln18_5_fu_648_p2 <= (or_ln18_1_fu_642_p2 and and_ln18_fu_459_p2);
    and_ln18_fu_459_p2 <= (icmp_ln1007_fu_453_p2 and icmp_ln1003_5_fu_447_p2);
    and_ln25_1_fu_465_p2 <= (icmp_ln1003_3_fu_429_p2 and icmp_ln1003_2_fu_423_p2);
    and_ln25_2_fu_477_p2 <= (xor_ln25_fu_471_p2 and and_ln25_fu_417_p2);
    and_ln25_3_fu_580_p2 <= (icmp_ln1003_3_fu_429_p2 and and_ln25_fu_417_p2);
    and_ln25_4_fu_586_p2 <= (icmp_ln1003_2_fu_423_p2 and and_ln25_3_fu_580_p2);
    and_ln25_fu_417_p2 <= (icmp_ln1003_fu_405_p2 and icmp_ln1003_1_fu_411_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln83_fu_189_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_189_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln83_fu_189_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_189_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx121_sum_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx121_sum_reg_709),64));
    arrayidx121_sum_fu_273_p2 <= std_logic_vector(unsigned(tmp_2_fu_265_p3) + unsigned(zext_ln83_1_reg_674));
    bitcast_ln483_2_fu_359_p1 <= m_q0;
    bitcast_ln483_fu_347_p1 <= conv2221_reg_151;
    data_V_1_fu_388_p1 <= dc_1_reg_770;
    data_V_fu_371_p1 <= dc_reg_763;
    empty_35_fu_219_p1 <= i_reg_129(7 - 1 downto 0);
    empty_36_fu_303_p2 <= std_logic_vector(unsigned(p_shl_fu_296_p3) - unsigned(zext_ln85_reg_687));
    grp_fu_1006_p_ce <= ap_const_logic_1;
    grp_fu_1006_p_din0 <= res_5_fu_654_p3;
    grp_fu_1009_p_ce <= ap_const_logic_1;
    grp_fu_1009_p_din0 <= m_q0;

    grp_fu_249_ap_start_assign_proc : process(ap_CS_fsm_state3, tmp_3_fu_205_p3, icmp_ln87_fu_243_p2)
    begin
        if (((icmp_ln87_fu_243_p2 = ap_const_lv1_0) and (tmp_3_fu_205_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_249_ap_start <= ap_const_logic_1;
        else 
            grp_fu_249_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_249_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    grp_fu_385_p_ce <= ap_const_logic_1;
    grp_fu_385_p_din0 <= conv2221_reg_151;
    i_cast1_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_219_p1),8));
    icmp_ln1003_1_fu_411_p2 <= "1" when (tmp_5_fu_384_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_2_fu_423_p2 <= "1" when (tmp_6_fu_391_p4 = ap_const_lv11_0) else "0";
    icmp_ln1003_3_fu_429_p2 <= "1" when (tmp_7_fu_401_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_4_fu_435_p2 <= "1" when (tmp_fu_374_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_5_fu_447_p2 <= "1" when (tmp_6_fu_391_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_fu_405_p2 <= "1" when (tmp_fu_374_p4 = ap_const_lv11_0) else "0";
    icmp_ln1007_fu_453_p2 <= "0" when (tmp_7_fu_401_p1 = ap_const_lv52_0) else "1";
    icmp_ln83_fu_189_p2 <= "1" when (d_fu_98 = ap_const_lv4_8) else "0";
    icmp_ln87_fu_243_p2 <= "1" when (unsigned(add_ln87_fu_237_p2) < unsigned(ap_const_lv8_3)) else "0";
    icmp_ln88_fu_286_p2 <= "1" when (trunc_ln88_fu_282_p1 = ap_const_lv2_0) else "0";
    icmp_ln91_fu_308_p2 <= "1" when (j_reg_140 = ap_const_lv2_3) else "0";
    j_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_140),9));
    m_address0 <= zext_ln93_fu_342_p1(12 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_231_p0 <= mul_fu_231_p00(7 - 1 downto 0);
    mul_fu_231_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_219_p1),15));
    mul_fu_231_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    or_ln18_1_fu_642_p2 <= (xor_ln18_2_fu_636_p2 or and_ln25_2_fu_477_p2);
    or_ln18_fu_630_p2 <= (xor_ln18_1_fu_624_p2 or icmp_ln1003_1_fu_411_p2);

    out_0_address0_assign_proc : process(out_0_addr_reg_717, ap_CS_fsm_state13, ap_CS_fsm_state16, arrayidx121_sum_cast_fu_292_p1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_0_address0 <= out_0_addr_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_0_address0 <= arrayidx121_sum_cast_fu_292_p1(9 - 1 downto 0);
        else 
            out_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    out_0_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_d0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state16, conv2221_reg_151)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_0_d0 <= conv2221_reg_151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_0_d0 <= ap_const_lv32_0;
        else 
            out_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_0_we0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state16, icmp_ln91_fu_308_p2, icmp_ln88_fu_286_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln88_fu_286_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln91_fu_308_p2 = ap_const_lv1_1)))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_2_fu_483_p4_proc : process(tmp_5_fu_384_p1)
    begin
        p_Result_2_fu_483_p4 <= tmp_5_fu_384_p1;
        p_Result_2_fu_483_p4(51) <= ap_const_lv1_1(0);
    end process;

    p_Result_3_fu_493_p4 <= ((p_Result_s_reg_750 & ap_const_lv11_7FF) & p_Result_2_fu_483_p4);
    p_Result_4_fu_510_p3 <= (p_Result_s_reg_750 & trunc_ln368_fu_506_p1);
    p_Result_5_fu_521_p3 <= (p_Result_1_reg_757 & trunc_ln368_1_fu_517_p1);
    p_shl_fu_296_p3 <= (empty_35_reg_700 & ap_const_lv2_0);
    res_1_fu_554_p3 <= 
        dc_1_reg_770 when (ymaggreater_1_fu_547_p3(0) = '1') else 
        dc_reg_763;
    res_2_fu_572_p3 <= 
        res_fu_502_p1 when (and_ln18_2_fu_566_p2(0) = '1') else 
        res_1_fu_554_p3;
    res_3_fu_592_p3 <= 
        dc_1_reg_770 when (and_ln25_4_fu_586_p2(0) = '1') else 
        res_2_fu_572_p3;
    res_4_fu_617_p3 <= 
        dc_1_reg_770 when (and_ln18_4_fu_611_p2(0) = '1') else 
        res_3_fu_592_p3;
    res_5_fu_654_p3 <= 
        dc_reg_763 when (and_ln18_5_fu_648_p2(0) = '1') else 
        res_4_fu_617_p3;
    res_fu_502_p1 <= p_Result_3_fu_493_p4;
    select_ln39_fu_540_p3 <= 
        xor_ln39_fu_534_p2 when (p_Result_s_reg_750(0) = '1') else 
        ymaggreater_fu_528_p2;
    tmp2_fu_329_p3 <= (tmp3_fu_324_p2 & ap_const_lv3_0);
    tmp3_fu_324_p2 <= std_logic_vector(unsigned(j_cast_fu_320_p1) + unsigned(empty_36_reg_722));
    tmp_1_fu_255_p4 <= mul_fu_231_p2(14 downto 9);
    tmp_2_fu_265_p3 <= (tmp_1_fu_255_p4 & ap_const_lv3_0);
    tmp_3_fu_205_p3 <= i_reg_129(7 downto 7);
    tmp_5_fu_384_p1 <= data_V_fu_371_p1(52 - 1 downto 0);
    tmp_6_fu_391_p4 <= data_V_1_fu_388_p1(62 downto 52);
    tmp_7_fu_401_p1 <= data_V_1_fu_388_p1(52 - 1 downto 0);
    tmp_fu_374_p4 <= data_V_fu_371_p1(62 downto 52);
    trunc_ln368_1_fu_517_p1 <= data_V_1_fu_388_p1(63 - 1 downto 0);
    trunc_ln368_fu_506_p1 <= data_V_fu_371_p1(63 - 1 downto 0);
    trunc_ln88_fu_282_p1 <= grp_fu_249_p2(2 - 1 downto 0);
    xor_ln1007_fu_441_p2 <= (icmp_ln1003_1_fu_411_p2 xor ap_const_lv1_1);
    xor_ln18_1_fu_624_p2 <= (icmp_ln1003_4_fu_435_p2 xor ap_const_lv1_1);
    xor_ln18_2_fu_636_p2 <= (or_ln18_fu_630_p2 xor and_ln25_fu_417_p2);
    xor_ln18_fu_605_p2 <= (ap_const_lv1_1 xor and_ln18_3_fu_599_p2);
    xor_ln25_fu_471_p2 <= (ap_const_lv1_1 xor and_ln25_1_fu_465_p2);
    xor_ln39_fu_534_p2 <= (ymaggreater_fu_528_p2 xor ap_const_lv1_1);
    ymaggreater_1_fu_547_p3 <= 
        select_ln39_fu_540_p3 when (p_Result_1_reg_757(0) = '1') else 
        ymaggreater_fu_528_p2;
    ymaggreater_fu_528_p2 <= "1" when (signed(p_Result_4_fu_510_p3) < signed(p_Result_5_fu_521_p3)) else "0";
    zext_ln83_1_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_98),9));
    zext_ln83_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_98),12));
    zext_ln85_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_129),9));
    zext_ln93_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_fu_337_p2),64));
end behav;
