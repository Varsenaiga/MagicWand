-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_maxPool_Pipeline_VITIS_LOOP_84_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    data_V_2 : IN STD_LOGIC_VECTOR (62 downto 0);
    p_Result_6 : IN STD_LOGIC_VECTOR (0 downto 0);
    dc_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    conv2221_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv2221_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of master_maxPool_Pipeline_VITIS_LOOP_84_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dc_2_read_reg_419 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_6_read_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_V_2_read_reg_432 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_2_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_2_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_3_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_3_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_5_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_5_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_473 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln18_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_4_fu_360_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_4_reg_483 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln18_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_1_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv2221_fu_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_conv2221_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_sig_allocacmp_conv2221_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_101_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln483_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_128_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_138_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal data_V_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_170_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_180_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_1_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_234_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_2_fu_244_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln368_fu_257_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_3_fu_261_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_268_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ymaggreater_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_1_fu_293_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_4_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1007_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_1_fu_300_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln25_3_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_4_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_2_fu_319_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln18_3_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_4_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_3_fu_337_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln18_1_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_2_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_2_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_5_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fptrunc_64ns_32_2_no_dsp_1_U72 : component master_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_101_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_101_p1);

    fpext_32ns_64_2_no_dsp_1_U73 : component master_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_conv2221_load_1,
        ce => ap_const_logic_1,
        dout => grp_fu_104_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    conv2221_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    conv2221_fu_66 <= out_0_load;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    conv2221_fu_66 <= grp_fu_101_p1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln18_reg_478 <= and_ln18_fu_214_p2;
                data_V_2_read_reg_432 <= data_V_2;
                dc_2_read_reg_419 <= dc_2;
                dc_reg_473 <= grp_fu_104_p1;
                icmp_ln1003_2_reg_449 <= icmp_ln1003_2_fu_142_p2;
                icmp_ln1003_3_reg_455 <= icmp_ln1003_3_fu_148_p2;
                icmp_ln1003_5_reg_461 <= icmp_ln1003_5_fu_154_p2;
                icmp_ln1007_reg_467 <= icmp_ln1007_fu_160_p2;
                or_ln18_1_reg_488 <= or_ln18_1_fu_385_p2;
                p_Result_6_read_reg_426 <= p_Result_6;
                p_Result_s_reg_442 <= bitcast_ln483_fu_116_p1(31 downto 31);
                res_4_reg_483 <= res_4_fu_360_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln18_1_fu_307_p2 <= (xor_ln1007_fu_208_p2 and icmp_ln1003_4_fu_202_p2);
    and_ln18_2_fu_313_p2 <= (and_ln18_fu_214_p2 and and_ln18_1_fu_307_p2);
    and_ln18_3_fu_344_p2 <= (icmp_ln1007_reg_467 and icmp_ln1003_5_reg_461);
    and_ln18_4_fu_354_p2 <= (xor_ln18_fu_348_p2 and and_ln18_1_fu_307_p2);
    and_ln18_5_fu_391_p2 <= (or_ln18_1_reg_488 and and_ln18_reg_478);
    and_ln18_fu_214_p2 <= (icmp_ln1007_reg_467 and icmp_ln1003_5_reg_461);
    and_ln25_1_fu_218_p2 <= (icmp_ln1003_3_reg_455 and icmp_ln1003_2_reg_449);
    and_ln25_2_fu_228_p2 <= (xor_ln25_fu_222_p2 and and_ln25_fu_196_p2);
    and_ln25_3_fu_327_p2 <= (icmp_ln1003_3_reg_455 and and_ln25_fu_196_p2);
    and_ln25_4_fu_332_p2 <= (icmp_ln1003_2_reg_449 and and_ln25_3_fu_327_p2);
    and_ln25_fu_196_p2 <= (icmp_ln1003_fu_184_p2 and icmp_ln1003_1_fu_190_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_conv2221_load_assign_proc : process(ap_enable_reg_pp0_iter3, conv2221_fu_66, grp_fu_101_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_conv2221_load <= grp_fu_101_p1;
        else 
            ap_sig_allocacmp_conv2221_load <= conv2221_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_conv2221_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, out_0_load, conv2221_fu_66, grp_fu_101_p1, ap_block_pp0_stage0)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_sig_allocacmp_conv2221_load_1 <= out_0_load;
            elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                ap_sig_allocacmp_conv2221_load_1 <= grp_fu_101_p1;
            else 
                ap_sig_allocacmp_conv2221_load_1 <= conv2221_fu_66;
            end if;
        else 
            ap_sig_allocacmp_conv2221_load_1 <= conv2221_fu_66;
        end if; 
    end process;

    bitcast_ln483_fu_116_p1 <= ap_sig_allocacmp_conv2221_load_1;
    conv2221_out <= ap_sig_allocacmp_conv2221_load;

    conv2221_out_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv2221_out_ap_vld <= ap_const_logic_1;
        else 
            conv2221_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_V_fu_166_p1 <= grp_fu_104_p1;
    grp_fu_101_p0 <= 
        dc_reg_473 when (and_ln18_5_fu_391_p2(0) = '1') else 
        res_4_reg_483;
    icmp_ln1003_1_fu_190_p2 <= "1" when (tmp_2_fu_180_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_2_fu_142_p2 <= "1" when (tmp_3_fu_128_p4 = ap_const_lv11_0) else "0";
    icmp_ln1003_3_fu_148_p2 <= "1" when (tmp_4_fu_138_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_4_fu_202_p2 <= "1" when (tmp_fu_170_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_5_fu_154_p2 <= "1" when (tmp_3_fu_128_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_fu_184_p2 <= "1" when (tmp_fu_170_p4 = ap_const_lv11_0) else "0";
    icmp_ln1007_fu_160_p2 <= "0" when (tmp_4_fu_138_p1 = ap_const_lv52_0) else "1";
    or_ln18_1_fu_385_p2 <= (xor_ln18_2_fu_379_p2 or and_ln25_2_fu_228_p2);
    or_ln18_fu_373_p2 <= (xor_ln18_1_fu_367_p2 or icmp_ln1003_1_fu_190_p2);
    
    p_Result_1_fu_234_p4_proc : process(tmp_2_fu_180_p1)
    begin
        p_Result_1_fu_234_p4 <= tmp_2_fu_180_p1;
        p_Result_1_fu_234_p4(51) <= ap_const_lv1_1(0);
    end process;

    p_Result_2_fu_244_p4 <= ((p_Result_s_reg_442 & ap_const_lv11_7FF) & p_Result_1_fu_234_p4);
    p_Result_3_fu_261_p3 <= (p_Result_s_reg_442 & trunc_ln368_fu_257_p1);
    p_Result_4_fu_268_p3 <= (p_Result_6_read_reg_426 & data_V_2_read_reg_432);
    res_1_fu_300_p3 <= 
        dc_2_read_reg_419 when (ymaggreater_1_fu_293_p3(0) = '1') else 
        grp_fu_104_p1;
    res_2_fu_319_p3 <= 
        res_fu_253_p1 when (and_ln18_2_fu_313_p2(0) = '1') else 
        res_1_fu_300_p3;
    res_3_fu_337_p3 <= 
        dc_2_read_reg_419 when (and_ln25_4_fu_332_p2(0) = '1') else 
        res_2_fu_319_p3;
    res_4_fu_360_p3 <= 
        dc_2_read_reg_419 when (and_ln18_4_fu_354_p2(0) = '1') else 
        res_3_fu_337_p3;
    res_fu_253_p1 <= p_Result_2_fu_244_p4;
    select_ln39_fu_286_p3 <= 
        xor_ln39_fu_280_p2 when (p_Result_s_reg_442(0) = '1') else 
        ymaggreater_fu_274_p2;
    tmp_2_fu_180_p1 <= data_V_fu_166_p1(52 - 1 downto 0);
    tmp_3_fu_128_p4 <= data_V_2(62 downto 52);
    tmp_4_fu_138_p1 <= data_V_2(52 - 1 downto 0);
    tmp_fu_170_p4 <= data_V_fu_166_p1(62 downto 52);
    trunc_ln368_fu_257_p1 <= data_V_fu_166_p1(63 - 1 downto 0);
    xor_ln1007_fu_208_p2 <= (icmp_ln1003_1_fu_190_p2 xor ap_const_lv1_1);
    xor_ln18_1_fu_367_p2 <= (icmp_ln1003_4_fu_202_p2 xor ap_const_lv1_1);
    xor_ln18_2_fu_379_p2 <= (or_ln18_fu_373_p2 xor and_ln25_fu_196_p2);
    xor_ln18_fu_348_p2 <= (ap_const_lv1_1 xor and_ln18_3_fu_344_p2);
    xor_ln25_fu_222_p2 <= (ap_const_lv1_1 xor and_ln25_1_fu_218_p2);
    xor_ln39_fu_280_p2 <= (ymaggreater_fu_274_p2 xor ap_const_lv1_1);
    ymaggreater_1_fu_293_p3 <= 
        select_ln39_fu_286_p3 when (p_Result_6_read_reg_426(0) = '1') else 
        ymaggreater_fu_274_p2;
    ymaggreater_fu_274_p2 <= "1" when (signed(p_Result_3_fu_261_p3) < signed(p_Result_4_fu_268_p3)) else "0";
end behav;
