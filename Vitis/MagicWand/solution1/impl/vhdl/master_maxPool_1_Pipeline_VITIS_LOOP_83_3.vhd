-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_maxPool_1_Pipeline_VITIS_LOOP_83_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arrayidx121_sum_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    empty : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln77 : IN STD_LOGIC_VECTOR (2 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_maxPool_1_Pipeline_VITIS_LOOP_83_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln83_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_0_addr_reg_554 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_0_addr_reg_554_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln83_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_568_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal p_Result_s_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_1_reg_602 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal arrayidx121_sum_cast_cast_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln84_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2221_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_conv2221_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_78 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln83_fu_170_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast_fu_176_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_180_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_186_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln77_cast_fu_142_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_fu_194_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln483_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln483_2_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_V_1_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_247_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_257_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_264_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_274_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln1003_5_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1007_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_2_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_3_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_1_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_356_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_7_fu_366_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln368_fu_379_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln368_1_fu_390_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_8_fu_383_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_9_fu_394_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ymaggreater_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ymaggreater_2_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1003_4_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1007_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_2_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_6_fu_427_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln25_3_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_4_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_7_fu_445_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln18_6_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_4_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_8_fu_465_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln18_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_2_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_2_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_1_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_5_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_9_fu_490_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fptrunc_64ns_32_2_no_dsp_1_U14 : component master_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_131_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_131_p1);

    fpext_32ns_64_2_no_dsp_1_U15 : component master_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_conv2221_load,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p1);

    fpext_32ns_64_2_no_dsp_1_U16 : component master_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_138_p1);

    flow_control_loop_pipe_sequential_init_U : component master_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    conv2221_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                conv2221_fu_74 <= out_0_load;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv2221_fu_74 <= grp_fu_131_p1;
            end if; 
        end if;
    end process;

    j_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln83_fu_164_p2 = ap_const_lv1_0))) then 
                    j_fu_78 <= add_ln83_fu_170_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_78 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                dc_1_reg_602 <= grp_fu_138_p1;
                dc_reg_595 <= grp_fu_135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln83_reg_559 <= icmp_ln83_fu_164_p2;
                ifzero_reg_568_pp0_iter1_reg <= ifzero_reg_568;
                out_0_addr_reg_554 <= arrayidx121_sum_cast_cast_fu_146_p1(9 - 1 downto 0);
                out_0_addr_reg_554_pp0_iter1_reg <= out_0_addr_reg_554;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln83_fu_164_p2 = ap_const_lv1_0))) then
                ifzero_reg_568 <= ifzero_fu_205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_reg_559 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_Result_5_reg_589 <= bitcast_ln483_2_fu_232_p1(31 downto 31);
                p_Result_s_reg_582 <= bitcast_ln483_fu_220_p1(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln83_fu_170_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv2_1));
    add_ln84_fu_194_p2 <= std_logic_vector(unsigned(tmp2_fu_186_p3) + unsigned(zext_ln77_cast_fu_142_p1));
    and_ln18_1_fu_433_p2 <= (xor_ln1007_fu_314_p2 and icmp_ln1003_4_fu_308_p2);
    and_ln18_2_fu_439_p2 <= (and_ln18_fu_332_p2 and and_ln18_1_fu_433_p2);
    and_ln18_4_fu_484_p2 <= (xor_ln18_fu_478_p2 and and_ln18_1_fu_433_p2);
    and_ln18_5_fu_521_p2 <= (or_ln18_1_fu_515_p2 and and_ln18_fu_332_p2);
    and_ln18_6_fu_472_p2 <= (icmp_ln1007_fu_326_p2 and icmp_ln1003_5_fu_320_p2);
    and_ln18_fu_332_p2 <= (icmp_ln1007_fu_326_p2 and icmp_ln1003_5_fu_320_p2);
    and_ln25_1_fu_338_p2 <= (icmp_ln1003_3_fu_302_p2 and icmp_ln1003_2_fu_296_p2);
    and_ln25_2_fu_350_p2 <= (xor_ln25_fu_344_p2 and and_ln25_fu_290_p2);
    and_ln25_3_fu_453_p2 <= (icmp_ln1003_3_fu_302_p2 and and_ln25_fu_290_p2);
    and_ln25_4_fu_459_p2 <= (icmp_ln1003_2_fu_296_p2 and and_ln25_3_fu_453_p2);
    and_ln25_fu_290_p2 <= (icmp_ln1003_fu_278_p2 and icmp_ln1003_1_fu_284_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln83_reg_559)
    begin
        if (((icmp_ln83_reg_559 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_conv2221_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, conv2221_fu_74, grp_fu_131_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_conv2221_load <= grp_fu_131_p1;
        else 
            ap_sig_allocacmp_conv2221_load <= conv2221_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_78;
        end if; 
    end process;

    arrayidx121_sum_cast_cast_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx121_sum_cast),64));
    bitcast_ln483_2_fu_232_p1 <= m_q0;
    bitcast_ln483_fu_220_p1 <= ap_sig_allocacmp_conv2221_load;
    data_V_1_fu_261_p1 <= dc_1_reg_602;
    data_V_fu_244_p1 <= dc_reg_595;
    grp_fu_131_p0 <= 
        dc_reg_595 when (and_ln18_5_fu_521_p2(0) = '1') else 
        res_9_fu_490_p3;
    icmp_ln1003_1_fu_284_p2 <= "1" when (tmp_8_fu_257_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_2_fu_296_p2 <= "1" when (tmp_9_fu_264_p4 = ap_const_lv11_0) else "0";
    icmp_ln1003_3_fu_302_p2 <= "1" when (tmp_10_fu_274_p1 = ap_const_lv52_0) else "0";
    icmp_ln1003_4_fu_308_p2 <= "1" when (tmp_fu_247_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_5_fu_320_p2 <= "1" when (tmp_9_fu_264_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln1003_fu_278_p2 <= "1" when (tmp_fu_247_p4 = ap_const_lv11_0) else "0";
    icmp_ln1007_fu_326_p2 <= "0" when (tmp_10_fu_274_p1 = ap_const_lv52_0) else "1";
    icmp_ln83_fu_164_p2 <= "1" when (ap_sig_allocacmp_j_1 = ap_const_lv2_3) else "0";
    ifzero_fu_205_p2 <= "1" when (add_ln83_fu_170_p2 = ap_const_lv2_3) else "0";
    j_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),9));
    m_address0 <= zext_ln84_fu_200_p1(12 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln18_1_fu_515_p2 <= (xor_ln18_2_fu_509_p2 or and_ln25_2_fu_350_p2);
    or_ln18_fu_503_p2 <= (xor_ln18_1_fu_497_p2 or icmp_ln1003_1_fu_284_p2);
    out_0_address0 <= out_0_addr_reg_554_pp0_iter1_reg;

    out_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_0_d0 <= grp_fu_131_p1;

    out_0_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ifzero_reg_568_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ifzero_reg_568_pp0_iter1_reg = ap_const_lv1_1))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_6_fu_356_p4_proc : process(tmp_8_fu_257_p1)
    begin
        p_Result_6_fu_356_p4 <= tmp_8_fu_257_p1;
        p_Result_6_fu_356_p4(51) <= ap_const_lv1_1(0);
    end process;

    p_Result_7_fu_366_p4 <= ((p_Result_s_reg_582 & ap_const_lv11_7FF) & p_Result_6_fu_356_p4);
    p_Result_8_fu_383_p3 <= (p_Result_s_reg_582 & trunc_ln368_fu_379_p1);
    p_Result_9_fu_394_p3 <= (p_Result_5_reg_589 & trunc_ln368_1_fu_390_p1);
    res_6_fu_427_p3 <= 
        dc_1_reg_602 when (ymaggreater_2_fu_420_p3(0) = '1') else 
        dc_reg_595;
    res_7_fu_445_p3 <= 
        res_fu_375_p1 when (and_ln18_2_fu_439_p2(0) = '1') else 
        res_6_fu_427_p3;
    res_8_fu_465_p3 <= 
        dc_1_reg_602 when (and_ln25_4_fu_459_p2(0) = '1') else 
        res_7_fu_445_p3;
    res_9_fu_490_p3 <= 
        dc_1_reg_602 when (and_ln18_4_fu_484_p2(0) = '1') else 
        res_8_fu_465_p3;
    res_fu_375_p1 <= p_Result_7_fu_366_p4;
    select_ln39_fu_413_p3 <= 
        xor_ln39_fu_407_p2 when (p_Result_s_reg_582(0) = '1') else 
        ymaggreater_fu_401_p2;
    tmp2_fu_186_p3 <= (tmp3_fu_180_p2 & ap_const_lv3_0);
    tmp3_fu_180_p2 <= std_logic_vector(unsigned(j_cast_fu_176_p1) + unsigned(empty));
    tmp_10_fu_274_p1 <= data_V_1_fu_261_p1(52 - 1 downto 0);
    tmp_8_fu_257_p1 <= data_V_fu_244_p1(52 - 1 downto 0);
    tmp_9_fu_264_p4 <= data_V_1_fu_261_p1(62 downto 52);
    tmp_fu_247_p4 <= data_V_fu_244_p1(62 downto 52);
    trunc_ln368_1_fu_390_p1 <= data_V_1_fu_261_p1(63 - 1 downto 0);
    trunc_ln368_fu_379_p1 <= data_V_fu_244_p1(63 - 1 downto 0);
    xor_ln1007_fu_314_p2 <= (icmp_ln1003_1_fu_284_p2 xor ap_const_lv1_1);
    xor_ln18_1_fu_497_p2 <= (icmp_ln1003_4_fu_308_p2 xor ap_const_lv1_1);
    xor_ln18_2_fu_509_p2 <= (or_ln18_fu_503_p2 xor and_ln25_fu_290_p2);
    xor_ln18_fu_478_p2 <= (ap_const_lv1_1 xor and_ln18_6_fu_472_p2);
    xor_ln25_fu_344_p2 <= (ap_const_lv1_1 xor and_ln25_1_fu_338_p2);
    xor_ln39_fu_407_p2 <= (ymaggreater_fu_401_p2 xor ap_const_lv1_1);
    ymaggreater_2_fu_420_p3 <= 
        select_ln39_fu_413_p3 when (p_Result_5_reg_589(0) = '1') else 
        ymaggreater_fu_401_p2;
    ymaggreater_fu_401_p2 <= "1" when (signed(p_Result_8_fu_383_p3) < signed(p_Result_9_fu_394_p3)) else "0";
    zext_ln77_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln77),12));
    zext_ln84_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_194_p2),64));
end behav;
