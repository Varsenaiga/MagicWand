-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_maxPool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    m_0_ce0 : OUT STD_LOGIC;
    m_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_945_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_945_p_ce : OUT STD_LOGIC );
end;


architecture behav of master_maxPool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_2A0 : STD_LOGIC_VECTOR (9 downto 0) := "1010100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln77_1_fu_144_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln77_1_reg_337 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln78_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln77_fu_159_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln77_reg_347 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_0_addr_reg_358 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start : STD_LOGIC;
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_done : STD_LOGIC;
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_idle : STD_LOGIC;
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_ready : STD_LOGIC;
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_data_V_2 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_conv2221_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_conv2221_out_ap_vld : STD_LOGIC;
    signal grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm_state13 : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal conv2221_loc_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal arrayidx121_sum_cast_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln78_fu_263_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_fu_66 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln77_1_fu_182_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_70 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln80_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln77_fu_176_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_200_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_fu_200_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln80_fu_206_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_fu_200_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_fu_216_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln77_1_fu_193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal arrayidx121_sum_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln77_fu_189_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_fu_252_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln483_4_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln483_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_167_ap_start : STD_LOGIC;
    signal grp_fu_167_ap_done : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal mul_fu_200_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component master_maxPool_Pipeline_VITIS_LOOP_83_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_0_load : IN STD_LOGIC_VECTOR (31 downto 0);
        data_V_2 : IN STD_LOGIC_VECTOR (62 downto 0);
        p_Result_6 : IN STD_LOGIC_VECTOR (0 downto 0);
        dc_2 : IN STD_LOGIC_VECTOR (63 downto 0);
        conv2221_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2221_out_ap_vld : OUT STD_LOGIC );
    end component;


    component master_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_urem_6ns_3ns_2_10_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component master_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105 : component master_maxPool_Pipeline_VITIS_LOOP_83_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start,
        ap_done => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_done,
        ap_idle => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_idle,
        ap_ready => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_ready,
        out_0_load => out_0_q0,
        data_V_2 => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_data_V_2,
        p_Result_6 => tmp_reg_373,
        dc_2 => grp_fu_945_p_dout0,
        conv2221_out => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_conv2221_out,
        conv2221_out_ap_vld => grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_conv2221_out_ap_vld);

    urem_6ns_3ns_2_10_seq_1_U80 : component master_urem_6ns_3ns_2_10_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_167_ap_start,
        done => grp_fu_167_ap_done,
        din0 => grp_fu_167_p0,
        din1 => grp_fu_167_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    mul_6ns_8ns_13_1_1_U81 : component master_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_fu_200_p0,
        din1 => mul_fu_200_p1,
        dout => mul_fu_200_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = ap_NS_fsm_state13))) then 
                    grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_ready = ap_const_logic_1)) then 
                    grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_66 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_fu_66 <= select_ln77_1_fu_182_p3;
            end if; 
        end if;
    end process;

    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_62 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_fu_62 <= add_ln78_fu_263_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_70 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvar_flatten_fu_70 <= add_ln77_1_reg_337;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln77_1_reg_337 <= add_ln77_1_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_conv2221_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                conv2221_loc_fu_74 <= grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_conv2221_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln77_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln78_reg_342 <= icmp_ln78_fu_153_p2;
                select_ln77_reg_347 <= select_ln77_fu_159_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                out_0_addr_reg_358 <= arrayidx121_sum_cast_fu_240_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_reg_373 <= bitcast_ln483_4_fu_282_p1(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln77_fu_138_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln77_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln77_1_fu_144_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_70) + unsigned(ap_const_lv10_1));
    add_ln77_fu_176_p2 <= std_logic_vector(unsigned(d_fu_66) + unsigned(ap_const_lv5_1));
    add_ln78_fu_263_p2 <= std_logic_vector(unsigned(select_ln77_reg_347) + unsigned(ap_const_lv6_1));
    add_ln84_fu_252_p2 <= std_logic_vector(unsigned(tmp2_fu_245_p3) + unsigned(zext_ln77_fu_189_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_NS_fsm_state13 <= ap_NS_fsm(12);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln77_fu_138_p2)
    begin
        if ((((icmp_ln77_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln77_fu_138_p2)
    begin
        if (((icmp_ln77_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx121_sum_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx121_sum_fu_234_p2),64));
    arrayidx121_sum_fu_234_p2 <= std_logic_vector(unsigned(tmp_8_fu_226_p3) + unsigned(zext_ln77_1_fu_193_p1));
    bitcast_ln483_4_fu_282_p1 <= m_0_q0;
    bitcast_ln483_fu_294_p1 <= grp_fu_945_p_dout0;

    grp_fu_167_ap_start_assign_proc : process(ap_CS_fsm_state2, icmp_ln77_fu_138_p2)
    begin
        if (((icmp_ln77_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_fu_167_ap_start <= ap_const_logic_1;
        else 
            grp_fu_167_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_167_p0 <= 
        i_fu_62 when (icmp_ln78_fu_153_p2(0) = '1') else 
        ap_const_lv6_0;
    grp_fu_167_p1 <= ap_const_lv6_3(3 - 1 downto 0);
    grp_fu_945_p_ce <= ap_const_logic_1;
    grp_fu_945_p_din0 <= m_0_q0;
    grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start <= grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_ap_start_reg;
    grp_maxPool_Pipeline_VITIS_LOOP_83_3_fu_105_data_V_2 <= bitcast_ln483_fu_294_p1(63 - 1 downto 0);
    icmp_ln77_fu_138_p2 <= "1" when (indvar_flatten_fu_70 = ap_const_lv10_2A0) else "0";
    icmp_ln78_fu_153_p2 <= "0" when (i_fu_62 = ap_const_lv6_2A) else "1";
    icmp_ln80_fu_210_p2 <= "1" when (trunc_ln80_fu_206_p1 = ap_const_lv2_0) else "0";
    m_0_address0 <= zext_ln84_fu_258_p1(10 - 1 downto 0);

    m_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            m_0_ce0 <= ap_const_logic_1;
        else 
            m_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_200_p0 <= mul_fu_200_p00(6 - 1 downto 0);
    mul_fu_200_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_reg_347),13));
    mul_fu_200_p1 <= ap_const_lv13_56(8 - 1 downto 0);

    out_0_address0_assign_proc : process(out_0_addr_reg_358, ap_CS_fsm_state11, ap_CS_fsm_state12, arrayidx121_sum_cast_fu_240_p1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            out_0_address0 <= out_0_addr_reg_358;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_0_address0 <= arrayidx121_sum_cast_fu_240_p1(8 - 1 downto 0);
        else 
            out_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    out_0_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_d0_assign_proc : process(ap_CS_fsm_state11, conv2221_loc_fu_74, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_0_d0 <= conv2221_loc_fu_74;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_0_d0 <= ap_const_lv32_0;
        else 
            out_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_0_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state17, icmp_ln80_fu_210_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln80_fu_210_p2 = ap_const_lv1_1)))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln77_1_fu_182_p3 <= 
        d_fu_66 when (icmp_ln78_reg_342(0) = '1') else 
        add_ln77_fu_176_p2;
    select_ln77_fu_159_p3 <= 
        i_fu_62 when (icmp_ln78_fu_153_p2(0) = '1') else 
        ap_const_lv6_0;
    tmp2_fu_245_p3 <= (select_ln77_reg_347 & ap_const_lv4_0);
    tmp_7_fu_216_p4 <= mul_fu_200_p2(11 downto 8);
    tmp_8_fu_226_p3 <= (tmp_7_fu_216_p4 & ap_const_lv4_0);
    trunc_ln80_fu_206_p1 <= grp_fu_167_p2(2 - 1 downto 0);
    zext_ln77_1_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_1_fu_182_p3),8));
    zext_ln77_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_1_fu_182_p3),10));
    zext_ln84_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_252_p2),64));
end behav;
