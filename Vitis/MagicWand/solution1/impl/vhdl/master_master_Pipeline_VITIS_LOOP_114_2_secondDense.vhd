-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_master_Pipeline_VITIS_LOOP_114_2_secondDense is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_master_Pipeline_VITIS_LOOP_114_2_secondDense is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

