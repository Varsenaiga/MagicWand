-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_master_Pipeline_VITIS_LOOP_114_1_secondDense is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          address1      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DataWidth-1 downto 0);
          address2      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(DataWidth-1 downto 0);
          address3      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(DataWidth-1 downto 0);
          address4      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce4       : in std_logic; 
          q4         : out std_logic_vector(DataWidth-1 downto 0);
          address5      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce5       : in std_logic; 
          q5         : out std_logic_vector(DataWidth-1 downto 0);
          address6      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce6       : in std_logic; 
          q6         : out std_logic_vector(DataWidth-1 downto 0);
          address7      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce7       : in std_logic; 
          q7         : out std_logic_vector(DataWidth-1 downto 0);
          address8      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce8       : in std_logic; 
          q8         : out std_logic_vector(DataWidth-1 downto 0);
          address9      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce9       : in std_logic; 
          q9         : out std_logic_vector(DataWidth-1 downto 0);
          address10      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce10       : in std_logic; 
          q10         : out std_logic_vector(DataWidth-1 downto 0);
          address11      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce11       : in std_logic; 
          q11         : out std_logic_vector(DataWidth-1 downto 0);
          address12      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce12       : in std_logic; 
          q12         : out std_logic_vector(DataWidth-1 downto 0);
          address13      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce13       : in std_logic; 
          q13         : out std_logic_vector(DataWidth-1 downto 0);
          address14      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce14       : in std_logic; 
          q14         : out std_logic_vector(DataWidth-1 downto 0);
          address15      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce15       : in std_logic; 
          q15         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_master_Pipeline_VITIS_LOOP_114_1_secondDense is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address2_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address3_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address4_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address5_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address6_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address7_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address8_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address9_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address10_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address11_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address12_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address13_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address14_tmp : std_logic_vector(AddressWidth-1 downto 0); 
signal address15_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem0 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem1 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem2 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem3 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem4 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem5 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem6 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );
signal mem7 : mem_array := (
    0 => "10111110100010100101110001000000", 
    1 => "00111110101010101000100011000101", 
    2 => "10111110000111110111011010110000", 
    3 => "00111110010110000011101000110101", 
    4 => "00111110101000111010010110000100", 
    5 => "00111101010010011101100100111000", 
    6 => "10111100011110000110001101011000", 
    7 => "10111110001011101001010010000010", 
    8 => "10111110011011101101111010010111", 
    9 => "10111110100111110010011111101010", 
    10 => "00111101110000000010010000011101", 
    11 => "00111100011001100011000100100001", 
    12 => "10111110100010001111100010000000", 
    13 => "10111110000110010000011011011101", 
    14 => "10111110101100110100101100111111", 
    15 => "00111110100011011101110001110000", 
    16 => "10111110100100111110111000100000", 
    17 => "10111110101111110111110011011110", 
    18 => "10111110010100000011101011011010", 
    19 => "00111110011011101001000100001110", 
    20 => "00111110100000011011110000011000", 
    21 => "10111001111111101001110000011000", 
    22 => "10111110100110110010110100010001", 
    23 => "10111110001111110111001110100010", 
    24 => "10111110101000110110110000001100", 
    25 => "10111110100011000100101100110111", 
    26 => "00111101101000000010011010010001", 
    27 => "00111110101111010000010010110011", 
    28 => "10111110011100000011111000000001", 
    29 => "10111110011010011101101111010001", 
    30 => "10111110100110001100000010110100", 
    31 => "00111110100000001101100111010100", 
    32 => "10111110011101001010100101100010", 
    33 => "10111110100000111110100110001010", 
    34 => "10111110010101001001001001111010", 
    35 => "00111110010000110101110110010010", 
    36 => "00111110011110110011010111100011", 
    37 => "00111101001011101000000111101110", 
    38 => "00111101111011000110100010111011", 
    39 => "10111110000110110111001001110000", 
    40 => "10111110101001000010000001100100", 
    41 => "10111101100011010001111101001111", 
    42 => "00111101111110001101011011101110", 
    43 => "00111110101100001000001111011011", 
    44 => "10111110100011001001100111010001", 
    45 => "10111110010001010010000110011001", 
    46 => "10111110100000100000010010010111", 
    47 => "00111110100010001101111100100101", 
    48 => "10111110010110111110011011100010", 
    49 => "00111101011010000101001111100101", 
    50 => "10111110010000001100110100001011", 
    51 => "00111110010101011110101001001110", 
    52 => "00111110100001011101100001010100", 
    53 => "00111101100000101011101000111100", 
    54 => "00111110111010011100000001011000", 
    55 => "10111110001010011100110000001100", 
    56 => "10111110101000100110111000111010", 
    57 => "00111110000100100100101010000100", 
    58 => "00111101110010111101100100110010", 
    59 => "00111110110101000001011010101101", 
    60 => "10111110100001011010100011110101", 
    61 => "10111101110010000011010001011100", 
    62 => "10111110101011000000001000110001", 
    63 => "00111110100111100001010100111110" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (address2) 
begin
      address2_tmp <= address2;
--synthesis translate_off
      if (CONV_INTEGER(address2) > AddressRange-1) then
           address2_tmp <= (others => '0');
      else 
           address2_tmp <= address2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (address3) 
begin
      address3_tmp <= address3;
--synthesis translate_off
      if (CONV_INTEGER(address3) > AddressRange-1) then
           address3_tmp <= (others => '0');
      else 
           address3_tmp <= address3;
      end if;
--synthesis translate_on
end process;

memory_access_guard_4: process (address4) 
begin
      address4_tmp <= address4;
--synthesis translate_off
      if (CONV_INTEGER(address4) > AddressRange-1) then
           address4_tmp <= (others => '0');
      else 
           address4_tmp <= address4;
      end if;
--synthesis translate_on
end process;

memory_access_guard_5: process (address5) 
begin
      address5_tmp <= address5;
--synthesis translate_off
      if (CONV_INTEGER(address5) > AddressRange-1) then
           address5_tmp <= (others => '0');
      else 
           address5_tmp <= address5;
      end if;
--synthesis translate_on
end process;

memory_access_guard_6: process (address6) 
begin
      address6_tmp <= address6;
--synthesis translate_off
      if (CONV_INTEGER(address6) > AddressRange-1) then
           address6_tmp <= (others => '0');
      else 
           address6_tmp <= address6;
      end if;
--synthesis translate_on
end process;

memory_access_guard_7: process (address7) 
begin
      address7_tmp <= address7;
--synthesis translate_off
      if (CONV_INTEGER(address7) > AddressRange-1) then
           address7_tmp <= (others => '0');
      else 
           address7_tmp <= address7;
      end if;
--synthesis translate_on
end process;

memory_access_guard_8: process (address8) 
begin
      address8_tmp <= address8;
--synthesis translate_off
      if (CONV_INTEGER(address8) > AddressRange-1) then
           address8_tmp <= (others => '0');
      else 
           address8_tmp <= address8;
      end if;
--synthesis translate_on
end process;

memory_access_guard_9: process (address9) 
begin
      address9_tmp <= address9;
--synthesis translate_off
      if (CONV_INTEGER(address9) > AddressRange-1) then
           address9_tmp <= (others => '0');
      else 
           address9_tmp <= address9;
      end if;
--synthesis translate_on
end process;

memory_access_guard_10: process (address10) 
begin
      address10_tmp <= address10;
--synthesis translate_off
      if (CONV_INTEGER(address10) > AddressRange-1) then
           address10_tmp <= (others => '0');
      else 
           address10_tmp <= address10;
      end if;
--synthesis translate_on
end process;

memory_access_guard_11: process (address11) 
begin
      address11_tmp <= address11;
--synthesis translate_off
      if (CONV_INTEGER(address11) > AddressRange-1) then
           address11_tmp <= (others => '0');
      else 
           address11_tmp <= address11;
      end if;
--synthesis translate_on
end process;

memory_access_guard_12: process (address12) 
begin
      address12_tmp <= address12;
--synthesis translate_off
      if (CONV_INTEGER(address12) > AddressRange-1) then
           address12_tmp <= (others => '0');
      else 
           address12_tmp <= address12;
      end if;
--synthesis translate_on
end process;

memory_access_guard_13: process (address13) 
begin
      address13_tmp <= address13;
--synthesis translate_off
      if (CONV_INTEGER(address13) > AddressRange-1) then
           address13_tmp <= (others => '0');
      else 
           address13_tmp <= address13;
      end if;
--synthesis translate_on
end process;

memory_access_guard_14: process (address14) 
begin
      address14_tmp <= address14;
--synthesis translate_off
      if (CONV_INTEGER(address14) > AddressRange-1) then
           address14_tmp <= (others => '0');
      else 
           address14_tmp <= address14;
      end if;
--synthesis translate_on
end process;

memory_access_guard_15: process (address15) 
begin
      address15_tmp <= address15;
--synthesis translate_off
      if (CONV_INTEGER(address15) > AddressRange-1) then
           address15_tmp <= (others => '0');
      else 
           address15_tmp <= address15;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(address2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3 <= mem1(CONV_INTEGER(address3_tmp)); 
        end if;
        if (ce4 = '1') then 
            q4 <= mem2(CONV_INTEGER(address4_tmp)); 
        end if;
        if (ce5 = '1') then 
            q5 <= mem2(CONV_INTEGER(address5_tmp)); 
        end if;
        if (ce6 = '1') then 
            q6 <= mem3(CONV_INTEGER(address6_tmp)); 
        end if;
        if (ce7 = '1') then 
            q7 <= mem3(CONV_INTEGER(address7_tmp)); 
        end if;
        if (ce8 = '1') then 
            q8 <= mem4(CONV_INTEGER(address8_tmp)); 
        end if;
        if (ce9 = '1') then 
            q9 <= mem4(CONV_INTEGER(address9_tmp)); 
        end if;
        if (ce10 = '1') then 
            q10 <= mem5(CONV_INTEGER(address10_tmp)); 
        end if;
        if (ce11 = '1') then 
            q11 <= mem5(CONV_INTEGER(address11_tmp)); 
        end if;
        if (ce12 = '1') then 
            q12 <= mem6(CONV_INTEGER(address12_tmp)); 
        end if;
        if (ce13 = '1') then 
            q13 <= mem6(CONV_INTEGER(address13_tmp)); 
        end if;
        if (ce14 = '1') then 
            q14 <= mem7(CONV_INTEGER(address14_tmp)); 
        end if;
        if (ce15 = '1') then 
            q15 <= mem7(CONV_INTEGER(address15_tmp)); 
        end if;
    end if;
end process;

end rtl;

