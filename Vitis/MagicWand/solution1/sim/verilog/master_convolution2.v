// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_convolution2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_0_address0,
        m_0_ce0,
        m_0_q0,
        m_0_address1,
        m_0_ce1,
        m_0_q1,
        out_0_address0,
        out_0_ce0,
        out_0_we0,
        out_0_d0,
        grp_fu_371_p_din0,
        grp_fu_371_p_din1,
        grp_fu_371_p_opcode,
        grp_fu_371_p_dout0,
        grp_fu_371_p_ce,
        grp_fu_377_p_din0,
        grp_fu_377_p_din1,
        grp_fu_377_p_dout0,
        grp_fu_377_p_ce,
        grp_fu_1002_p_din0,
        grp_fu_1002_p_din1,
        grp_fu_1002_p_dout0,
        grp_fu_1002_p_ce,
        grp_fu_388_p_din0,
        grp_fu_388_p_din1,
        grp_fu_388_p_opcode,
        grp_fu_388_p_dout0,
        grp_fu_388_p_ce
);

parameter    ap_ST_fsm_state1 = 42'd1;
parameter    ap_ST_fsm_state2 = 42'd2;
parameter    ap_ST_fsm_state3 = 42'd4;
parameter    ap_ST_fsm_state4 = 42'd8;
parameter    ap_ST_fsm_state5 = 42'd16;
parameter    ap_ST_fsm_state6 = 42'd32;
parameter    ap_ST_fsm_state7 = 42'd64;
parameter    ap_ST_fsm_state8 = 42'd128;
parameter    ap_ST_fsm_state9 = 42'd256;
parameter    ap_ST_fsm_state10 = 42'd512;
parameter    ap_ST_fsm_state11 = 42'd1024;
parameter    ap_ST_fsm_state12 = 42'd2048;
parameter    ap_ST_fsm_state13 = 42'd4096;
parameter    ap_ST_fsm_state14 = 42'd8192;
parameter    ap_ST_fsm_state15 = 42'd16384;
parameter    ap_ST_fsm_state16 = 42'd32768;
parameter    ap_ST_fsm_state17 = 42'd65536;
parameter    ap_ST_fsm_state18 = 42'd131072;
parameter    ap_ST_fsm_state19 = 42'd262144;
parameter    ap_ST_fsm_state20 = 42'd524288;
parameter    ap_ST_fsm_state21 = 42'd1048576;
parameter    ap_ST_fsm_state22 = 42'd2097152;
parameter    ap_ST_fsm_state23 = 42'd4194304;
parameter    ap_ST_fsm_state24 = 42'd8388608;
parameter    ap_ST_fsm_state25 = 42'd16777216;
parameter    ap_ST_fsm_state26 = 42'd33554432;
parameter    ap_ST_fsm_state27 = 42'd67108864;
parameter    ap_ST_fsm_state28 = 42'd134217728;
parameter    ap_ST_fsm_state29 = 42'd268435456;
parameter    ap_ST_fsm_state30 = 42'd536870912;
parameter    ap_ST_fsm_state31 = 42'd1073741824;
parameter    ap_ST_fsm_state32 = 42'd2147483648;
parameter    ap_ST_fsm_state33 = 42'd4294967296;
parameter    ap_ST_fsm_state34 = 42'd8589934592;
parameter    ap_ST_fsm_state35 = 42'd17179869184;
parameter    ap_ST_fsm_state36 = 42'd34359738368;
parameter    ap_ST_fsm_state37 = 42'd68719476736;
parameter    ap_ST_fsm_state38 = 42'd137438953472;
parameter    ap_ST_fsm_state39 = 42'd274877906944;
parameter    ap_ST_fsm_state40 = 42'd549755813888;
parameter    ap_ST_fsm_state41 = 42'd1099511627776;
parameter    ap_ST_fsm_state42 = 42'd2199023255552;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] m_0_address0;
output   m_0_ce0;
input  [31:0] m_0_q0;
output  [8:0] m_0_address1;
output   m_0_ce1;
input  [31:0] m_0_q1;
output  [9:0] out_0_address0;
output   out_0_ce0;
output   out_0_we0;
output  [31:0] out_0_d0;
output  [31:0] grp_fu_371_p_din0;
output  [31:0] grp_fu_371_p_din1;
output  [1:0] grp_fu_371_p_opcode;
input  [31:0] grp_fu_371_p_dout0;
output   grp_fu_371_p_ce;
output  [31:0] grp_fu_377_p_din0;
output  [31:0] grp_fu_377_p_din1;
input  [31:0] grp_fu_377_p_dout0;
output   grp_fu_377_p_ce;
output  [31:0] grp_fu_1002_p_din0;
output  [31:0] grp_fu_1002_p_din1;
input  [31:0] grp_fu_1002_p_dout0;
output   grp_fu_1002_p_ce;
output  [31:0] grp_fu_388_p_din0;
output  [31:0] grp_fu_388_p_din1;
output  [4:0] grp_fu_388_p_opcode;
input  [0:0] grp_fu_388_p_dout0;
output   grp_fu_388_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] m_0_address0;
reg m_0_ce0;
reg m_0_ce1;
reg out_0_ce0;
reg out_0_we0;
reg[31:0] out_0_d0;

(* fsm_encoding = "none" *) reg   [41:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] secondBias_address0;
reg    secondBias_ce0;
wire   [31:0] secondBias_q0;
reg   [8:0] secondKernel_address0;
reg    secondKernel_ce0;
wire   [31:0] secondKernel_q0;
wire   [8:0] secondKernel_address1;
reg    secondKernel_ce1;
wire   [31:0] secondKernel_q1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
reg   [31:0] reg_399;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state32;
wire   [9:0] zext_ln46_1_fu_418_p1;
reg   [9:0] zext_ln46_1_reg_770;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln46_fu_428_p2;
reg   [4:0] add_ln46_reg_778;
wire   [0:0] icmp_ln46_fu_422_p2;
wire   [3:0] empty_47_fu_434_p1;
reg   [3:0] empty_47_reg_788;
wire   [8:0] arrayidx17_sum1_fu_445_p2;
reg   [8:0] arrayidx17_sum1_reg_794;
wire    ap_CS_fsm_state3;
wire   [8:0] arrayidx61_sum2_fu_451_p2;
reg   [8:0] arrayidx61_sum2_reg_799;
wire   [8:0] arrayidx74_sum3_fu_457_p2;
reg   [8:0] arrayidx74_sum3_reg_804;
reg   [31:0] secondBias_load_reg_809;
wire   [5:0] indvars_iv_next63_fu_469_p2;
reg   [5:0] indvars_iv_next63_reg_817;
wire    ap_CS_fsm_state4;
wire   [8:0] tmp_12_fu_483_p3;
reg   [8:0] tmp_12_reg_824;
wire   [0:0] exitcond669_fu_463_p2;
reg   [9:0] out_0_addr_reg_830;
wire   [3:0] add_ln54_fu_515_p2;
reg   [3:0] add_ln54_reg_838;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln54_fu_509_p2;
wire   [0:0] cmp27_fu_547_p2;
reg   [0:0] cmp27_reg_853;
wire   [0:0] cmp51_fu_553_p2;
reg   [0:0] cmp51_reg_857;
wire   [0:0] cmp89_fu_559_p2;
reg   [0:0] cmp89_reg_861;
wire   [8:0] tmp_13_fu_564_p3;
reg   [8:0] tmp_13_reg_865;
wire   [8:0] tmp_14_fu_571_p3;
reg   [8:0] tmp_14_reg_871;
wire    ap_CS_fsm_state12;
wire   [3:0] add_ln59_fu_585_p2;
reg   [3:0] add_ln59_reg_884;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln59_fu_579_p2;
wire    ap_CS_fsm_state20;
wire   [3:0] add_ln68_fu_635_p2;
reg   [3:0] add_ln68_reg_907;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln68_fu_629_p2;
wire    ap_CS_fsm_state28;
wire   [3:0] add_ln64_fu_674_p2;
reg   [3:0] add_ln64_reg_930;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln64_fu_668_p2;
reg   [31:0] mul3_reg_965;
reg   [31:0] add2_reg_970;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln73_fu_741_p2;
reg   [0:0] icmp_ln73_reg_980;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln73_1_fu_747_p2;
reg   [0:0] icmp_ln73_1_reg_985;
reg   [5:0] i_reg_220;
wire    ap_CS_fsm_state42;
reg   [3:0] h_reg_232;
reg   [31:0] empty_49_reg_243;
reg   [3:0] h_1_reg_254;
reg   [31:0] empty_52_reg_265;
reg   [31:0] ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
reg   [31:0] arrayidx8524_promoted_reg_277;
reg   [3:0] h_3_reg_289;
reg   [31:0] empty_56_reg_300;
reg   [3:0] h_2_reg_312;
reg   [31:0] empty_54_reg_323;
reg   [31:0] empty_58_reg_335;
wire   [63:0] zext_ln46_fu_413_p1;
wire   [63:0] zext_ln53_fu_496_p1;
wire   [63:0] zext_ln55_fu_526_p1;
wire   [63:0] zext_ln55_1_fu_536_p1;
wire   [63:0] zext_ln60_fu_606_p1;
wire   [63:0] zext_ln60_1_fu_620_p1;
wire   [63:0] zext_ln69_fu_646_p1;
wire   [63:0] zext_ln69_1_fu_659_p1;
wire   [63:0] zext_ln65_fu_685_p1;
wire   [63:0] zext_ln65_1_fu_698_p1;
wire   [63:0] zext_ln65_2_fu_708_p1;
wire   [63:0] zext_ln65_3_fu_718_p1;
reg   [4:0] d_fu_92;
wire   [0:0] and_ln73_fu_757_p2;
reg   [31:0] grp_fu_350_p0;
reg   [31:0] grp_fu_350_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state37;
reg   [31:0] grp_fu_358_p0;
reg   [31:0] grp_fu_358_p1;
wire   [8:0] tmp_10_fu_438_p3;
wire   [9:0] tmp_11_fu_475_p3;
wire   [9:0] add_ln53_fu_491_p2;
wire   [8:0] zext_ln54_fu_505_p1;
wire   [8:0] add_ln55_fu_521_p2;
wire   [8:0] add_ln55_1_fu_531_p2;
wire   [5:0] empty_51_fu_541_p2;
wire   [3:0] xor_ln60_fu_591_p2;
wire  signed [8:0] sext_ln60_fu_597_p1;
wire   [8:0] add_ln60_fu_601_p2;
wire   [8:0] add_ln60_1_fu_611_p4;
wire   [8:0] zext_ln68_fu_625_p1;
wire   [8:0] add_ln69_fu_641_p2;
wire   [4:0] grp_fu_378_p4;
wire   [8:0] add_ln69_1_fu_651_p3;
wire   [8:0] zext_ln64_fu_664_p1;
wire   [8:0] add_ln65_fu_680_p2;
wire   [8:0] add_ln65_1_fu_690_p3;
wire   [8:0] add_ln65_2_fu_703_p2;
wire   [8:0] add_ln65_3_fu_713_p2;
wire   [31:0] bitcast_ln73_fu_723_p1;
wire   [7:0] tmp_8_fu_727_p4;
wire   [22:0] trunc_ln73_fu_737_p1;
wire   [0:0] or_ln73_fu_753_p2;
reg   [41:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 42'd1;
end

master_convolution2_secondBias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
secondBias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(secondBias_address0),
    .ce0(secondBias_ce0),
    .q0(secondBias_q0)
);

master_convolution2_secondKernel #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
secondKernel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(secondKernel_address0),
    .ce0(secondKernel_ce0),
    .q0(secondKernel_q0),
    .address1(secondKernel_address1),
    .ce1(secondKernel_ce1),
    .q1(secondKernel_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp27_fu_547_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_509_p2 == 1'd1))) begin
        arrayidx8524_promoted_reg_277 <= empty_49_reg_243;
    end else if (((icmp_ln59_fu_579_p2 == 1'd1) & (cmp27_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        arrayidx8524_promoted_reg_277 <= empty_52_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_fu_92 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond669_fu_463_p2 == 1'd1))) begin
        d_fu_92 <= add_ln46_reg_778;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond669_fu_463_p2 == 1'd0))) begin
        empty_49_reg_243 <= secondBias_load_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        empty_49_reg_243 <= grp_fu_371_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp27_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_509_p2 == 1'd1))) begin
        empty_52_reg_265 <= empty_49_reg_243;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        empty_52_reg_265 <= grp_fu_371_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (((cmp51_reg_857 == 1'd1) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp51_reg_857 == 1'd1))))) begin
        empty_54_reg_323 <= ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        empty_54_reg_323 <= grp_fu_371_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (((cmp89_reg_861 == 1'd1) & (cmp51_reg_857 == 1'd0) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp89_reg_861 == 1'd1) & (cmp51_reg_857 == 1'd0))))) begin
        empty_56_reg_300 <= ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        empty_56_reg_300 <= grp_fu_371_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (((cmp89_reg_861 == 1'd0) & (cmp51_reg_857 == 1'd0) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp89_reg_861 == 1'd0) & (cmp51_reg_857 == 1'd0))))) begin
        empty_58_reg_335 <= ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4;
    end else if (((icmp_ln68_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        empty_58_reg_335 <= empty_56_reg_300;
    end else if (((icmp_ln64_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        empty_58_reg_335 <= empty_54_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp27_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_509_p2 == 1'd1))) begin
        h_1_reg_254 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        h_1_reg_254 <= add_ln59_reg_884;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (((cmp51_reg_857 == 1'd1) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp51_reg_857 == 1'd1))))) begin
        h_2_reg_312 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        h_2_reg_312 <= add_ln64_reg_930;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (((cmp89_reg_861 == 1'd1) & (cmp51_reg_857 == 1'd0) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp89_reg_861 == 1'd1) & (cmp51_reg_857 == 1'd0))))) begin
        h_3_reg_289 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        h_3_reg_289 <= add_ln68_reg_907;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond669_fu_463_p2 == 1'd0))) begin
        h_reg_232 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        h_reg_232 <= add_ln54_reg_838;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_220 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_220 <= indvars_iv_next63_reg_817;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add2_reg_970 <= grp_fu_371_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln46_reg_778 <= add_ln46_fu_428_p2;
        zext_ln46_1_reg_770[4 : 0] <= zext_ln46_1_fu_418_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln54_reg_838 <= add_ln54_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp27_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        add_ln59_reg_884 <= add_ln59_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln64_reg_930 <= add_ln64_fu_674_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln68_reg_907 <= add_ln68_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        arrayidx17_sum1_reg_794[8 : 5] <= arrayidx17_sum1_fu_445_p2[8 : 5];
        arrayidx61_sum2_reg_799[8 : 5] <= arrayidx61_sum2_fu_451_p2[8 : 5];
        arrayidx74_sum3_reg_804[8 : 5] <= arrayidx74_sum3_fu_457_p2[8 : 5];
        secondBias_load_reg_809 <= secondBias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_509_p2 == 1'd1))) begin
        cmp27_reg_853 <= cmp27_fu_547_p2;
        cmp51_reg_857 <= cmp51_fu_553_p2;
        cmp89_reg_861 <= cmp89_fu_559_p2;
        tmp_13_reg_865[8 : 3] <= tmp_13_fu_564_p3[8 : 3];
        tmp_14_reg_871[8 : 3] <= tmp_14_fu_571_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_422_p2 == 1'd0))) begin
        empty_47_reg_788 <= empty_47_fu_434_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        icmp_ln73_1_reg_985 <= icmp_ln73_1_fu_747_p2;
        icmp_ln73_reg_980 <= icmp_ln73_fu_741_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvars_iv_next63_reg_817 <= indvars_iv_next63_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        mul3_reg_965 <= grp_fu_1002_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond669_fu_463_p2 == 1'd0))) begin
        out_0_addr_reg_830 <= zext_ln53_fu_496_p1;
        tmp_12_reg_824[8 : 3] <= tmp_12_fu_483_p3[8 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_399 <= grp_fu_377_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_422_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_579_p2 == 1'd1) & (cmp27_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4 = empty_52_reg_265;
    end else begin
        ap_phi_mux_arrayidx8524_promoted_phi_fu_280_p4 = arrayidx8524_promoted_reg_277;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_422_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_350_p0 = empty_54_reg_323;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_350_p0 = reg_399;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_350_p0 = empty_56_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_350_p0 = empty_52_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_350_p0 = empty_49_reg_243;
    end else begin
        grp_fu_350_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_350_p1 = add2_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_350_p1 = mul3_reg_965;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_350_p1 = reg_399;
    end else begin
        grp_fu_350_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_358_p0 = m_0_q1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_358_p0 = m_0_q0;
    end else begin
        grp_fu_358_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_358_p1 = secondKernel_q1;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_358_p1 = secondKernel_q0;
    end else begin
        grp_fu_358_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        m_0_address0 = zext_ln65_2_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        m_0_address0 = zext_ln69_fu_646_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        m_0_address0 = zext_ln60_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_0_address0 = zext_ln55_fu_526_p1;
    end else begin
        m_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        m_0_ce0 = 1'b1;
    end else begin
        m_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        m_0_ce1 = 1'b1;
    end else begin
        m_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        out_0_ce0 = 1'b1;
    end else begin
        out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        out_0_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        out_0_d0 = empty_54_reg_323;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        out_0_d0 = empty_56_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_0_d0 = empty_52_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_0_d0 = empty_49_reg_243;
    end else begin
        out_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln73_fu_757_p2) & (1'b1 == ap_CS_fsm_state42)) | ((icmp_ln68_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21)) | ((icmp_ln64_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp27_reg_853 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_509_p2 == 1'd1)))) begin
        out_0_we0 = 1'b1;
    end else begin
        out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        secondBias_ce0 = 1'b1;
    end else begin
        secondBias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        secondKernel_address0 = zext_ln65_3_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        secondKernel_address0 = zext_ln69_1_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        secondKernel_address0 = zext_ln60_1_fu_620_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        secondKernel_address0 = zext_ln55_1_fu_536_p1;
    end else begin
        secondKernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state5))) begin
        secondKernel_ce0 = 1'b1;
    end else begin
        secondKernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        secondKernel_ce1 = 1'b1;
    end else begin
        secondKernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln46_fu_422_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond669_fu_463_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (((cmp51_reg_857 == 1'd1) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp51_reg_857 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((1'b1 == ap_CS_fsm_state13) & (((cmp89_reg_861 == 1'd1) & (cmp51_reg_857 == 1'd0) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp89_reg_861 == 1'd1) & (cmp51_reg_857 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b1 == ap_CS_fsm_state13) & (((cmp89_reg_861 == 1'd0) & (cmp51_reg_857 == 1'd0) & (cmp27_reg_853 == 1'd1)) | ((icmp_ln59_fu_579_p2 == 1'd1) & (cmp89_reg_861 == 1'd0) & (cmp51_reg_857 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln68_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state29 : begin
            if (((icmp_ln64_fu_668_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_428_p2 = (d_fu_92 + 5'd1);

assign add_ln53_fu_491_p2 = (tmp_11_fu_475_p3 + zext_ln46_1_reg_770);

assign add_ln54_fu_515_p2 = (h_reg_232 + 4'd1);

assign add_ln55_1_fu_531_p2 = (zext_ln54_fu_505_p1 + arrayidx17_sum1_reg_794);

assign add_ln55_fu_521_p2 = (zext_ln54_fu_505_p1 + tmp_12_reg_824);

assign add_ln59_fu_585_p2 = (h_1_reg_254 + 4'd1);

assign add_ln60_1_fu_611_p4 = {{{empty_47_reg_788}, {1'd0}}, {h_1_reg_254}};

assign add_ln60_fu_601_p2 = ($signed(sext_ln60_fu_597_p1) + $signed(tmp_12_reg_824));

assign add_ln64_fu_674_p2 = (h_2_reg_312 + 4'd1);

assign add_ln65_1_fu_690_p3 = {{grp_fu_378_p4}, {h_2_reg_312}};

assign add_ln65_2_fu_703_p2 = (zext_ln64_fu_664_p1 + tmp_14_reg_871);

assign add_ln65_3_fu_713_p2 = (zext_ln64_fu_664_p1 + arrayidx74_sum3_reg_804);

assign add_ln65_fu_680_p2 = (zext_ln64_fu_664_p1 + tmp_13_reg_865);

assign add_ln68_fu_635_p2 = (h_3_reg_289 + 4'd1);

assign add_ln69_1_fu_651_p3 = {{grp_fu_378_p4}, {h_3_reg_289}};

assign add_ln69_fu_641_p2 = (zext_ln68_fu_625_p1 + tmp_13_reg_865);

assign and_ln73_fu_757_p2 = (or_ln73_fu_753_p2 & grp_fu_388_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign arrayidx17_sum1_fu_445_p2 = (tmp_10_fu_438_p3 | 9'd8);

assign arrayidx61_sum2_fu_451_p2 = (tmp_10_fu_438_p3 | 9'd16);

assign arrayidx74_sum3_fu_457_p2 = (tmp_10_fu_438_p3 | 9'd24);

assign bitcast_ln73_fu_723_p1 = empty_58_reg_335;

assign cmp27_fu_547_p2 = ((i_reg_220 == 6'd0) ? 1'b1 : 1'b0);

assign cmp51_fu_553_p2 = ((empty_51_fu_541_p2 < 6'd42) ? 1'b1 : 1'b0);

assign cmp89_fu_559_p2 = ((indvars_iv_next63_reg_817 < 6'd42) ? 1'b1 : 1'b0);

assign empty_47_fu_434_p1 = d_fu_92[3:0];

assign empty_51_fu_541_p2 = (i_reg_220 + 6'd2);

assign exitcond669_fu_463_p2 = ((i_reg_220 == 6'd42) ? 1'b1 : 1'b0);

assign grp_fu_1002_p_ce = 1'b1;

assign grp_fu_1002_p_din0 = m_0_q0;

assign grp_fu_1002_p_din1 = secondKernel_q0;

assign grp_fu_371_p_ce = 1'b1;

assign grp_fu_371_p_din0 = grp_fu_350_p0;

assign grp_fu_371_p_din1 = grp_fu_350_p1;

assign grp_fu_371_p_opcode = 2'd0;

assign grp_fu_377_p_ce = 1'b1;

assign grp_fu_377_p_din0 = grp_fu_358_p0;

assign grp_fu_377_p_din1 = grp_fu_358_p1;

assign grp_fu_378_p4 = {{arrayidx61_sum2_reg_799[8:4]}};

assign grp_fu_388_p_ce = 1'b1;

assign grp_fu_388_p_din0 = empty_58_reg_335;

assign grp_fu_388_p_din1 = 32'd0;

assign grp_fu_388_p_opcode = 5'd4;

assign icmp_ln46_fu_422_p2 = ((d_fu_92 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_509_p2 = ((h_reg_232 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_579_p2 = ((h_1_reg_254 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_668_p2 = ((h_2_reg_312 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_629_p2 = ((h_3_reg_289 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_747_p2 = ((trunc_ln73_fu_737_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_741_p2 = ((tmp_8_fu_727_p4 != 8'd255) ? 1'b1 : 1'b0);

assign indvars_iv_next63_fu_469_p2 = (i_reg_220 + 6'd1);

assign m_0_address1 = zext_ln65_fu_685_p1;

assign or_ln73_fu_753_p2 = (icmp_ln73_reg_980 | icmp_ln73_1_reg_985);

assign out_0_address0 = out_0_addr_reg_830;

assign secondBias_address0 = zext_ln46_fu_413_p1;

assign secondKernel_address1 = zext_ln65_1_fu_698_p1;

assign sext_ln60_fu_597_p1 = $signed(xor_ln60_fu_591_p2);

assign tmp_10_fu_438_p3 = {{empty_47_reg_788}, {5'd0}};

assign tmp_11_fu_475_p3 = {{i_reg_220}, {4'd0}};

assign tmp_12_fu_483_p3 = {{i_reg_220}, {3'd0}};

assign tmp_13_fu_564_p3 = {{indvars_iv_next63_reg_817}, {3'd0}};

assign tmp_14_fu_571_p3 = {{empty_51_fu_541_p2}, {3'd0}};

assign tmp_8_fu_727_p4 = {{bitcast_ln73_fu_723_p1[30:23]}};

assign trunc_ln73_fu_737_p1 = bitcast_ln73_fu_723_p1[22:0];

assign xor_ln60_fu_591_p2 = (h_1_reg_254 ^ 4'd8);

assign zext_ln46_1_fu_418_p1 = d_fu_92;

assign zext_ln46_fu_413_p1 = d_fu_92;

assign zext_ln53_fu_496_p1 = add_ln53_fu_491_p2;

assign zext_ln54_fu_505_p1 = h_reg_232;

assign zext_ln55_1_fu_536_p1 = add_ln55_1_fu_531_p2;

assign zext_ln55_fu_526_p1 = add_ln55_fu_521_p2;

assign zext_ln60_1_fu_620_p1 = add_ln60_1_fu_611_p4;

assign zext_ln60_fu_606_p1 = add_ln60_fu_601_p2;

assign zext_ln64_fu_664_p1 = h_2_reg_312;

assign zext_ln65_1_fu_698_p1 = add_ln65_1_fu_690_p3;

assign zext_ln65_2_fu_708_p1 = add_ln65_2_fu_703_p2;

assign zext_ln65_3_fu_718_p1 = add_ln65_3_fu_713_p2;

assign zext_ln65_fu_685_p1 = add_ln65_fu_680_p2;

assign zext_ln68_fu_625_p1 = h_3_reg_289;

assign zext_ln69_1_fu_659_p1 = add_ln69_1_fu_651_p3;

assign zext_ln69_fu_646_p1 = add_ln69_fu_641_p2;

always @ (posedge ap_clk) begin
    zext_ln46_1_reg_770[9:5] <= 5'b00000;
    arrayidx17_sum1_reg_794[4:0] <= 5'b01000;
    arrayidx61_sum2_reg_799[4:0] <= 5'b10000;
    arrayidx74_sum3_reg_804[4:0] <= 5'b11000;
    tmp_12_reg_824[2:0] <= 3'b000;
    tmp_13_reg_865[2:0] <= 3'b000;
    tmp_14_reg_871[2:0] <= 3'b000;
end

endmodule //master_convolution2
