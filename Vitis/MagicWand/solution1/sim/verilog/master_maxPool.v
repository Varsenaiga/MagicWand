// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_maxPool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_0_address0,
        m_0_ce0,
        m_0_q0,
        out_0_address0,
        out_0_ce0,
        out_0_we0,
        out_0_d0,
        out_0_q0,
        grp_fu_1006_p_din0,
        grp_fu_1006_p_dout0,
        grp_fu_1006_p_ce,
        grp_fu_385_p_din0,
        grp_fu_385_p_dout0,
        grp_fu_385_p_ce
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] m_0_address0;
output   m_0_ce0;
input  [31:0] m_0_q0;
output  [7:0] out_0_address0;
output   out_0_ce0;
output   out_0_we0;
output  [31:0] out_0_d0;
input  [31:0] out_0_q0;
output  [63:0] grp_fu_1006_p_din0;
input  [31:0] grp_fu_1006_p_dout0;
output   grp_fu_1006_p_ce;
output  [31:0] grp_fu_385_p_din0;
input  [63:0] grp_fu_385_p_dout0;
output   grp_fu_385_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_0_ce0;
reg[7:0] out_0_address0;
reg out_0_ce0;
reg out_0_we0;
reg[31:0] out_0_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] zext_ln83_fu_191_p1;
reg   [9:0] zext_ln83_reg_628;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln83_2_fu_195_p1;
reg   [7:0] zext_ln83_2_reg_633;
wire   [4:0] add_ln83_fu_205_p2;
reg   [4:0] add_ln83_reg_641;
wire   [11:0] add_ln85_1_fu_211_p2;
reg   [11:0] add_ln85_1_reg_646;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln85_fu_223_p2;
reg   [5:0] add_ln85_reg_654;
reg   [7:0] out_0_addr_reg_662;
wire   [0:0] icmp_ln85_fu_217_p2;
wire    ap_CS_fsm_state4;
reg   [0:0] p_Result_6_reg_677;
wire    ap_CS_fsm_state5;
reg   [63:0] dc_2_reg_688;
wire   [63:0] data_V_2_fu_301_p1;
reg   [63:0] data_V_2_reg_695;
reg   [0:0] p_Result_s_reg_702;
wire    ap_CS_fsm_state6;
wire   [0:0] ap_phi_mux_j_phi_fu_156_p4;
wire   [5:0] select_ln93_fu_329_p3;
reg   [63:0] dc_reg_714;
wire    ap_CS_fsm_state7;
wire   [0:0] and_ln18_fu_421_p2;
reg   [0:0] and_ln18_reg_719;
wire   [63:0] res_9_fu_579_p3;
reg   [63:0] res_9_reg_724;
wire   [0:0] or_ln18_2_fu_604_p2;
reg   [0:0] or_ln18_2_reg_729;
wire   [63:0] res_10_fu_614_p3;
wire    ap_CS_fsm_state9;
reg   [5:0] i_reg_117;
wire   [0:0] icmp_ln83_fu_199_p2;
reg   [11:0] phi_mul_reg_128;
reg   [5:0] phi_urem_reg_139;
reg   [0:0] j_reg_151;
reg   [31:0] conv2221_reg_164;
wire   [63:0] arrayidx121_sum_cast_fu_262_p1;
wire   [63:0] zext_ln93_fu_280_p1;
reg   [4:0] d_fu_86;
wire   [0:0] icmp_ln88_fu_233_p2;
reg   [31:0] grp_fu_178_p0;
wire   [1:0] trunc_ln88_fu_229_p1;
wire   [3:0] tmp_7_fu_239_p4;
wire   [7:0] tmp_8_fu_249_p3;
wire   [7:0] arrayidx121_sum_fu_257_p2;
wire   [9:0] tmp2_fu_267_p3;
wire   [9:0] add_ln93_fu_275_p2;
wire   [31:0] bitcast_ln483_4_fu_289_p1;
wire   [31:0] bitcast_ln483_fu_305_p1;
wire   [5:0] add_ln93_1_fu_317_p2;
wire   [0:0] icmp_ln93_fu_323_p2;
wire   [63:0] data_V_fu_337_p1;
wire   [10:0] tmp_fu_341_p4;
wire   [51:0] tmp_12_fu_351_p1;
wire   [0:0] icmp_ln1003_fu_367_p2;
wire   [0:0] icmp_ln1003_6_fu_373_p2;
wire   [10:0] tmp_13_fu_355_p4;
wire   [51:0] tmp_14_fu_364_p1;
wire   [0:0] icmp_ln1003_10_fu_409_p2;
wire   [0:0] icmp_ln1007_fu_415_p2;
wire   [0:0] icmp_ln1003_7_fu_385_p2;
wire   [0:0] icmp_ln1003_8_fu_391_p2;
wire   [0:0] and_ln25_5_fu_427_p2;
wire   [0:0] and_ln25_fu_379_p2;
wire   [0:0] xor_ln25_fu_433_p2;
wire   [51:0] p_Result_7_fu_445_p4;
wire   [63:0] p_Result_8_fu_455_p4;
wire   [62:0] trunc_ln368_fu_468_p1;
wire   [62:0] trunc_ln368_2_fu_479_p1;
wire   [63:0] p_Result_9_fu_472_p3;
wire   [63:0] p_Result_10_fu_482_p3;
wire   [0:0] ymaggreater_fu_489_p2;
wire   [0:0] xor_ln39_fu_495_p2;
wire   [0:0] select_ln39_fu_501_p3;
wire   [0:0] ymaggreater_2_fu_508_p3;
wire   [0:0] icmp_ln1003_9_fu_397_p2;
wire   [0:0] xor_ln1007_fu_403_p2;
wire   [0:0] and_ln18_6_fu_522_p2;
wire   [0:0] and_ln18_7_fu_528_p2;
wire   [63:0] res_fu_464_p1;
wire   [63:0] res_6_fu_515_p3;
wire   [0:0] and_ln25_7_fu_542_p2;
wire   [0:0] and_ln25_8_fu_548_p2;
wire   [63:0] res_7_fu_534_p3;
wire   [0:0] and_ln18_8_fu_561_p2;
wire   [0:0] xor_ln18_fu_567_p2;
wire   [0:0] and_ln18_9_fu_573_p2;
wire   [63:0] res_8_fu_554_p3;
wire   [0:0] xor_ln18_3_fu_586_p2;
wire   [0:0] or_ln18_fu_592_p2;
wire   [0:0] and_ln25_6_fu_439_p2;
wire   [0:0] xor_ln18_4_fu_598_p2;
wire   [0:0] and_ln18_10_fu_610_p2;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv2221_reg_164 <= out_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        conv2221_reg_164 <= grp_fu_1006_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_fu_86 <= 5'd0;
    end else if (((icmp_ln85_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        d_fu_86 <= add_ln83_reg_641;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_199_p2 == 1'd0))) begin
        i_reg_117 <= 6'd0;
    end else if (((ap_phi_mux_j_phi_fu_156_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_117 <= add_ln85_reg_654;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_151 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j_reg_151 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_199_p2 == 1'd0))) begin
        phi_mul_reg_128 <= 12'd0;
    end else if (((ap_phi_mux_j_phi_fu_156_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_128 <= add_ln85_1_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_199_p2 == 1'd0))) begin
        phi_urem_reg_139 <= 6'd0;
    end else if (((ap_phi_mux_j_phi_fu_156_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_urem_reg_139 <= select_ln93_fu_329_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln83_reg_641 <= add_ln83_fu_205_p2;
        zext_ln83_2_reg_633[4 : 0] <= zext_ln83_2_fu_195_p1[4 : 0];
        zext_ln83_reg_628[4 : 0] <= zext_ln83_fu_191_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln85_1_reg_646 <= add_ln85_1_fu_211_p2;
        add_ln85_reg_654 <= add_ln85_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        and_ln18_reg_719 <= and_ln18_fu_421_p2;
        dc_reg_714 <= grp_fu_385_p_dout0;
        or_ln18_2_reg_729 <= or_ln18_2_fu_604_p2;
        res_9_reg_724 <= res_9_fu_579_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        data_V_2_reg_695 <= data_V_2_fu_301_p1;
        dc_2_reg_688 <= grp_fu_385_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_0_addr_reg_662 <= arrayidx121_sum_cast_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Result_6_reg_677 <= bitcast_ln483_4_fu_289_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_j_phi_fu_156_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        p_Result_s_reg_702 <= bitcast_ln483_fu_305_p1[32'd31];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_199_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_199_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_178_p0 = conv2221_reg_164;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_178_p0 = m_0_q0;
    end else begin
        grp_fu_178_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_0_ce0 = 1'b1;
    end else begin
        m_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        out_0_address0 = out_0_addr_reg_662;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_0_address0 = arrayidx121_sum_cast_fu_262_p1;
    end else begin
        out_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        out_0_ce0 = 1'b1;
    end else begin
        out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_0_d0 = conv2221_reg_164;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_0_d0 = 32'd0;
    end else begin
        out_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln85_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln88_fu_233_p2 == 1'd1)) | ((ap_phi_mux_j_phi_fu_156_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        out_0_we0 = 1'b1;
    end else begin
        out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_199_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln85_fu_217_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((ap_phi_mux_j_phi_fu_156_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln83_fu_205_p2 = (d_fu_86 + 5'd1);

assign add_ln85_1_fu_211_p2 = (phi_mul_reg_128 + 12'd86);

assign add_ln85_fu_223_p2 = (i_reg_117 + 6'd1);

assign add_ln93_1_fu_317_p2 = (phi_urem_reg_139 + 6'd1);

assign add_ln93_fu_275_p2 = (tmp2_fu_267_p3 + zext_ln83_reg_628);

assign and_ln18_10_fu_610_p2 = (or_ln18_2_reg_729 & and_ln18_reg_719);

assign and_ln18_6_fu_522_p2 = (xor_ln1007_fu_403_p2 & icmp_ln1003_9_fu_397_p2);

assign and_ln18_7_fu_528_p2 = (and_ln18_fu_421_p2 & and_ln18_6_fu_522_p2);

assign and_ln18_8_fu_561_p2 = (icmp_ln1007_fu_415_p2 & icmp_ln1003_10_fu_409_p2);

assign and_ln18_9_fu_573_p2 = (xor_ln18_fu_567_p2 & and_ln18_6_fu_522_p2);

assign and_ln18_fu_421_p2 = (icmp_ln1007_fu_415_p2 & icmp_ln1003_10_fu_409_p2);

assign and_ln25_5_fu_427_p2 = (icmp_ln1003_8_fu_391_p2 & icmp_ln1003_7_fu_385_p2);

assign and_ln25_6_fu_439_p2 = (xor_ln25_fu_433_p2 & and_ln25_fu_379_p2);

assign and_ln25_7_fu_542_p2 = (icmp_ln1003_8_fu_391_p2 & and_ln25_fu_379_p2);

assign and_ln25_8_fu_548_p2 = (icmp_ln1003_7_fu_385_p2 & and_ln25_7_fu_542_p2);

assign and_ln25_fu_379_p2 = (icmp_ln1003_fu_367_p2 & icmp_ln1003_6_fu_373_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_phi_mux_j_phi_fu_156_p4 = j_reg_151;

assign arrayidx121_sum_cast_fu_262_p1 = arrayidx121_sum_fu_257_p2;

assign arrayidx121_sum_fu_257_p2 = (tmp_8_fu_249_p3 + zext_ln83_2_reg_633);

assign bitcast_ln483_4_fu_289_p1 = m_0_q0;

assign bitcast_ln483_fu_305_p1 = conv2221_reg_164;

assign data_V_2_fu_301_p1 = grp_fu_385_p_dout0;

assign data_V_fu_337_p1 = grp_fu_385_p_dout0;

assign grp_fu_1006_p_ce = 1'b1;

assign grp_fu_1006_p_din0 = res_10_fu_614_p3;

assign grp_fu_385_p_ce = 1'b1;

assign grp_fu_385_p_din0 = grp_fu_178_p0;

assign icmp_ln1003_10_fu_409_p2 = ((tmp_13_fu_355_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1003_6_fu_373_p2 = ((tmp_12_fu_351_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1003_7_fu_385_p2 = ((tmp_13_fu_355_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln1003_8_fu_391_p2 = ((tmp_14_fu_364_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1003_9_fu_397_p2 = ((tmp_fu_341_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1003_fu_367_p2 = ((tmp_fu_341_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln1007_fu_415_p2 = ((tmp_14_fu_364_p1 != 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_199_p2 = ((d_fu_86 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_217_p2 = ((i_reg_117 == 6'd42) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_233_p2 = ((trunc_ln88_fu_229_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_323_p2 = ((add_ln93_1_fu_317_p2 < 6'd3) ? 1'b1 : 1'b0);

assign m_0_address0 = zext_ln93_fu_280_p1;

assign or_ln18_2_fu_604_p2 = (xor_ln18_4_fu_598_p2 | and_ln25_6_fu_439_p2);

assign or_ln18_fu_592_p2 = (xor_ln18_3_fu_586_p2 | icmp_ln1003_6_fu_373_p2);

assign p_Result_10_fu_482_p3 = {{p_Result_6_reg_677}, {trunc_ln368_2_fu_479_p1}};

assign p_Result_7_fu_445_p4 = {|(1'd1), tmp_12_fu_351_p1[51 - 1:0]};

assign p_Result_8_fu_455_p4 = {{{p_Result_s_reg_702}, {11'd2047}}, {p_Result_7_fu_445_p4}};

assign p_Result_9_fu_472_p3 = {{p_Result_s_reg_702}, {trunc_ln368_fu_468_p1}};

assign res_10_fu_614_p3 = ((and_ln18_10_fu_610_p2[0:0] == 1'b1) ? dc_reg_714 : res_9_reg_724);

assign res_6_fu_515_p3 = ((ymaggreater_2_fu_508_p3[0:0] == 1'b1) ? dc_2_reg_688 : grp_fu_385_p_dout0);

assign res_7_fu_534_p3 = ((and_ln18_7_fu_528_p2[0:0] == 1'b1) ? res_fu_464_p1 : res_6_fu_515_p3);

assign res_8_fu_554_p3 = ((and_ln25_8_fu_548_p2[0:0] == 1'b1) ? dc_2_reg_688 : res_7_fu_534_p3);

assign res_9_fu_579_p3 = ((and_ln18_9_fu_573_p2[0:0] == 1'b1) ? dc_2_reg_688 : res_8_fu_554_p3);

assign res_fu_464_p1 = p_Result_8_fu_455_p4;

assign select_ln39_fu_501_p3 = ((p_Result_s_reg_702[0:0] == 1'b1) ? xor_ln39_fu_495_p2 : ymaggreater_fu_489_p2);

assign select_ln93_fu_329_p3 = ((icmp_ln93_fu_323_p2[0:0] == 1'b1) ? add_ln93_1_fu_317_p2 : 6'd0);

assign tmp2_fu_267_p3 = {{i_reg_117}, {4'd0}};

assign tmp_12_fu_351_p1 = data_V_fu_337_p1[51:0];

assign tmp_13_fu_355_p4 = {{data_V_2_reg_695[62:52]}};

assign tmp_14_fu_364_p1 = data_V_2_reg_695[51:0];

assign tmp_7_fu_239_p4 = {{phi_mul_reg_128[11:8]}};

assign tmp_8_fu_249_p3 = {{tmp_7_fu_239_p4}, {4'd0}};

assign tmp_fu_341_p4 = {{data_V_fu_337_p1[62:52]}};

assign trunc_ln368_2_fu_479_p1 = data_V_2_reg_695[62:0];

assign trunc_ln368_fu_468_p1 = data_V_fu_337_p1[62:0];

assign trunc_ln88_fu_229_p1 = phi_urem_reg_139[1:0];

assign xor_ln1007_fu_403_p2 = (icmp_ln1003_6_fu_373_p2 ^ 1'd1);

assign xor_ln18_3_fu_586_p2 = (icmp_ln1003_9_fu_397_p2 ^ 1'd1);

assign xor_ln18_4_fu_598_p2 = (or_ln18_fu_592_p2 ^ and_ln25_fu_379_p2);

assign xor_ln18_fu_567_p2 = (1'd1 ^ and_ln18_8_fu_561_p2);

assign xor_ln25_fu_433_p2 = (1'd1 ^ and_ln25_5_fu_427_p2);

assign xor_ln39_fu_495_p2 = (ymaggreater_fu_489_p2 ^ 1'd1);

assign ymaggreater_2_fu_508_p3 = ((p_Result_6_reg_677[0:0] == 1'b1) ? select_ln39_fu_501_p3 : ymaggreater_fu_489_p2);

assign ymaggreater_fu_489_p2 = (($signed(p_Result_9_fu_472_p3) < $signed(p_Result_10_fu_482_p3)) ? 1'b1 : 1'b0);

assign zext_ln83_2_fu_195_p1 = d_fu_86;

assign zext_ln83_fu_191_p1 = d_fu_86;

assign zext_ln93_fu_280_p1 = add_ln93_fu_275_p2;

always @ (posedge ap_clk) begin
    zext_ln83_reg_628[9:5] <= 5'b00000;
    zext_ln83_2_reg_633[7:5] <= 3'b000;
end

endmodule //master_maxPool
